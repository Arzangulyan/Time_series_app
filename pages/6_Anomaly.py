import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from plotly.subplots import make_subplots

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–∞—Ö", layout="wide")

from modules.anomaly_module import (
    generate_anomalous_series,
    add_anomalies_to_existing_data,
    z_score_detection,
    iqr_detection,
    hampel_filter,
    detect_plateau,
    evaluate_anomaly_detection,  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    create_true_anomaly_mask  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'anomalies' not in st.session_state:
    st.session_state.anomalies = {
        'point': [],
        'extended': [],
        'sensor': []
    }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–¥—Ö–æ–¥—É –≤ template
has_loaded_data = 'time_series' in st.session_state and st.session_state.time_series is not None and not st.session_state.time_series.empty

# ====================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ù–¢–ï–†–§–ï–ô–°–ê
# ====================
st.title("–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏")

with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    # –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data_source = st.radio(
        "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö",
        ["–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ", "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"],
        index=1 if has_loaded_data else 0,
        disabled=not has_loaded_data
    )
    
    if data_source == "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" and not has_loaded_data:
        st.warning("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        data_source = "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"
    
    if data_source == "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":
        st.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ –∏–∑ session_state
        main_column = st.session_state.get("main_column", None)
        
        # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏, –µ—Å–ª–∏ main_column –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ - DataFrame —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
        if has_loaded_data:
            time_series = st.session_state.time_series
            
            if isinstance(time_series, pd.DataFrame):
                numeric_cols = time_series.select_dtypes(include=[np.number]).columns.tolist()
                if len(numeric_cols) > 1:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å main_column, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    default_idx = numeric_cols.index(main_column) if main_column in numeric_cols else 0
                    selected_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞–Ω–Ω—ã–º–∏", numeric_cols, index=default_idx)
                elif len(numeric_cols) == 1:
                    selected_column = numeric_cols[0]
                    st.success(f"–í—ã–±—Ä–∞–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü: {selected_column}")
                else:
                    selected_column = None
                    st.error("–ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                    data_source = "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"
            elif isinstance(time_series, pd.Series):
                selected_column = time_series.name if time_series.name else "Value"
                st.success(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥: {selected_column}")
            else:
                st.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(time_series)}")
                data_source = "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    if data_source == "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ":
        st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        n = st.slider("–î–ª–∏–Ω–∞ —Ä—è–¥–∞", 100, 1000, 300)
        season_amp = st.slider("–ê–º–ø–ª–∏—Ç—É–¥–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏", 0.0, 2.0, 0.5)
        noise_std = st.slider("–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞", 0.0, 1.0, 0.2)
    
    # –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π
    st.subheader("–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π")
    
    # –¢–æ—á–µ—á–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
    with st.expander("‚ûï –¢–æ—á–µ—á–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏"):
        point_indices = st.text_input("–ò–Ω–¥–µ–∫—Å—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", key="point_indices")
        point_amp_min = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞", 0.1, 5.0, 1.0, key="point_amp_min")
        point_amp_max = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞", 0.1, 5.0, 2.0, key="point_amp_max")
        point_direction = st.radio("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", ["–í–≤–µ—Ä—Ö", "–í–Ω–∏–∑"], key="point_dir")
        
        if st.button("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–µ—á–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏"):
            try:
                indices = []
                for i in point_indices.split(","):
                    i_clean = i.strip()
                    if i_clean:
                        if not i_clean.isdigit():
                            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {i_clean}")
                        idx = int(i_clean)
                        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω–¥–µ–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                        max_idx = n - 1 if data_source == "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ" else len(st.session_state.time_series) - 1
                        if idx < 0 or idx > max_idx:
                            raise ValueError(f"–ò–Ω–¥–µ–∫—Å {idx} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [0, {max_idx}]")
                        indices.append(idx)
                indices = list(set(indices))  # —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ—á–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π –≤ session_state
                if indices:  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
                    new_anom = {
                        'indices': indices,
                        'amplitude_range': (point_amp_min, point_amp_max),
                        'increase': point_direction == "–í–≤–µ—Ä—Ö"
                    }
                    st.session_state.anomalies['point'].append(new_anom)
                    st.success(f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–æ—á–µ—á–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ –¥–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤: {indices}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {str(e)}")
    
    # –ü—Ä–æ—Ç—è–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
    with st.expander("üìè –ü—Ä–æ—Ç—è–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏"):
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω–¥–µ–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        max_idx = n - 1 if data_source == "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ" else len(st.session_state.time_series) - 1 if has_loaded_data else 299
        
        ext_start = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å", 0, max_idx, min(80, max_idx), key="ext_start")
        ext_duration = st.number_input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 1, min(100, max_idx - ext_start + 1), 
                                       min(25, max_idx - ext_start + 1), key="ext_dur")
        ext_shift = st.number_input("–°–º–µ—â–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è", -5.0, 5.0, -2.5, key="ext_shift")
        
        if st.button("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ç—è–∂–µ–Ω–Ω—É—é –∞–Ω–æ–º–∞–ª–∏—é"):
            new_anom = {
                'start_idx': ext_start,
                'duration': ext_duration,
                'level_shift': ext_shift
            }
            st.session_state.anomalies['extended'].append(new_anom)
            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–Ω–∞—è –∞–Ω–æ–º–∞–ª–∏—è –Ω–∞—á–∏–Ω–∞—è —Å –∏–Ω–¥–µ–∫—Å–∞ {ext_start}")
    
    # –°–±–æ–∏ –¥–∞—Ç—á–∏–∫–æ–≤
    with st.expander("‚ö†Ô∏è –°–±–æ–∏ –¥–∞—Ç—á–∏–∫–æ–≤"):
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω–¥–µ–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        max_idx = n - 1 if data_source == "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ" else len(st.session_state.time_series) - 1 if has_loaded_data else 299
        
        fault_start = st.number_input("–ù–∞—á–∞–ª–æ —Å–±–æ—è", 0, max_idx, min(220, max_idx), key="fault_start")
        fault_duration = st.number_input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–±–æ—è", 1, min(100, max_idx - fault_start + 1), 
                                        min(35, max_idx - fault_start + 1), key="fault_dur")
        fault_value = st.selectbox("–ó–Ω–∞—á–µ–Ω–∏–µ", ["NaN", "0", "1", "–î—Ä—É–≥–æ–µ"], key="fault_val")
        custom_value = st.number_input("–°–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", key="custom_fault") if fault_value == "–î—Ä—É–≥–æ–µ" else None
        
        if st.button("–î–æ–±–∞–≤–∏—Ç—å —Å–±–æ–π –¥–∞—Ç—á–∏–∫–∞"):
            value = np.nan if fault_value == "NaN" else (
                custom_value if fault_value == "–î—Ä—É–≥–æ–µ" else float(fault_value))
            
            new_anom = {
                'start_idx': fault_start,
                'duration': fault_duration,
                'fault_value': value
            }
            st.session_state.anomalies['sensor'].append(new_anom)
            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω —Å–±–æ–π –¥–∞—Ç—á–∏–∫–∞ –Ω–∞—á–∏–Ω–∞—è —Å –∏–Ω–¥–µ–∫—Å–∞ {fault_start}")
    
    # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
    if st.button("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–Ω–æ–º–∞–ª–∏–∏"):
        st.session_state.anomalies = {'point': [], 'extended': [], 'sensor': []}
        st.success("–í—Å–µ –∞–Ω–æ–º–∞–ª–∏–∏ —É–¥–∞–ª–µ–Ω—ã")

# ====================
# –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–õ–ò –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
# ====================
@st.cache_data
def generate_data(params):
    return generate_anomalous_series(**params)

@st.cache_data
def add_anomalies_to_real_data(data, _time, params):
    data_with_anomalies, anomaly_info = add_anomalies_to_existing_data(
        data, _time, 
        point_anomalies=params['point_anomalies'],
        extended_anomalies=params['extended_anomalies'],
        sensor_faults=params['sensor_faults']
    )
    return data_with_anomalies, anomaly_info

try:
    if data_source == "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ":
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        generation_params = {
            'n': n,
            'season_amp': season_amp,
            'noise_std': noise_std,
            'point_anomalies': st.session_state.anomalies['point'],
            'extended_anomalies': st.session_state.anomalies['extended'],
            'sensor_faults': st.session_state.anomalies['sensor']
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –≤—Ä–µ–º—è –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        data, time, metadata = generate_data(generation_params)
        df = pd.DataFrame({'data': data, 'time': time})
        original_data = None
    else:
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ st.session_state.time_series
        time_series = st.session_state.time_series
        
        if isinstance(time_series, pd.Series):
            # –ï—Å–ª–∏ Series, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
            original_data = time_series.values
            time_index = time_series.index
        elif isinstance(time_series, pd.DataFrame) and selected_column in time_series.columns:
            # –ï—Å–ª–∏ DataFrame, –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
            original_data = time_series[selected_column].values
            time_index = time_series.index
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
            st.stop()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏ –∫ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        anomaly_params = {
            'point_anomalies': st.session_state.anomalies['point'],
            'extended_anomalies': st.session_state.anomalies['extended'],
            'sensor_faults': st.session_state.anomalies['sensor']
        }
        
        data_with_anomalies, metadata = add_anomalies_to_real_data(original_data, time_index, anomaly_params)
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        df = pd.DataFrame({
            'original': original_data,
            'data': data_with_anomalies,
            'time': time_index
        })
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π
        data = data_with_anomalies
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    st.stop()

# ====================
# –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ê–°–¢–†–û–ï–ö
# ====================
with st.expander("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–æ–º–∞–ª–∏–π"):
    if not any(st.session_state.anomalies.values()):
        st.write("–ê–Ω–æ–º–∞–ª–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    else:
        anom_list = []
        for anom_type, anoms in st.session_state.anomalies.items():
            for anom in anoms:
                record = {'–¢–∏–ø': anom_type}
                record.update(anom)
                anom_list.append(record)
        
        anom_df = pd.DataFrame(anom_list)
        st.dataframe(
            anom_df,
            column_order=['–¢–∏–ø', 'indices', 'amplitude_range', 
                         'start_idx', 'duration', 'level_shift', 'fault_value'],
            use_container_width=True
        )

# ====================
# –ù–ê–°–¢–†–û–ô–ö–ò –î–ï–¢–ï–ö–¶–ò–ò
# ====================
with st.sidebar:
    st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π")
    
    # Z-Score
    with st.expander("üìà Z-Score –º–µ—Ç–æ–¥", expanded=True):
        use_zscore = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Z-Score", value=True, 
                                help="–ú–µ—Ç–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è")
        z_threshold = st.slider("–ü–æ—Ä–æ–≥ Z-Score", 1.0, 5.0, 3.0, step=0.5,
                               help=(
                                   "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ:\n"
                                   "‚Ä¢ 1œÉ ‚âà 68% –¥–∞–Ω–Ω—ã—Ö\n"
                                   "‚Ä¢ 2œÉ ‚âà 95% –¥–∞–Ω–Ω—ã—Ö\n"
                                   "‚Ä¢ 3œÉ ‚âà 99.7% –¥–∞–Ω–Ω—ã—Ö\n"
                                   "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 3 (–≤—ã—è–≤–ª—è–µ—Ç —è–≤–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã)"
                               ))
    
    # Hampel
    with st.expander("üîç –§–∏–ª—å—Ç—Ä –•–∞–º–ø–µ–ª—è", expanded=True):
        use_hampel = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –•–∞–º–ø–µ–ª—å", value=True,
                                help="–£—Å—Ç–æ–π—á–∏–≤—ã–π –º–µ—Ç–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ–¥–∏–∞–Ω –∏ MAD")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        hampel_adaptive = st.checkbox("–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞", value=True, 
                                     help="–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–ª–∏–Ω—ã —Ä—è–¥–∞")
        
        if hampel_adaptive:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            hampel_window_percent = st.slider("–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–ª–∏–Ω—ã —Ä—è–¥–∞ (%)", 0.1, 5.0, 0.5, step=0.1,
                                            help=(
                                                "–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–ª–∏–Ω—ã —Ä—è–¥–∞:\n"
                                                "‚Ä¢ –ú–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: –≤—ã—à–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º\n"
                                                "‚Ä¢ –ë–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –±–æ–ª–µ–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç\n"
                                                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 0.5-1% –¥–ª—è –µ–∂–µ–º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª–∏"
                                            ))
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            if data_source == "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" and "time_series" in st.session_state:
                approx_window = max(5, min(int(len(st.session_state.time_series) * hampel_window_percent / 100), 
                                        len(st.session_state.time_series) // 5))
                st.info(f"–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä—è–¥–∞: {approx_window} —Ç–æ—á–µ–∫")
            hampel_window = 0  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ 0, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        else:
            # –ï—Å–ª–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Å–ª–∞–π–¥–µ—Ä –¥–ª—è –æ–∫–Ω–∞
            hampel_window = st.slider("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", 5, 500, 20, step=5,
                                    help=(
                                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–µ–¥–∏–∞–Ω—ã:\n"
                                        "‚Ä¢ –ú–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: –≤—ã—à–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º\n"
                                        "‚Ä¢ –ë–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: —É—Å—Ç–æ–π—á–∏–≤–µ–µ –∫ —à—É–º–∞–º\n"
                                        "–î–ª—è –±–æ–ª—å—à–∏—Ö —Ä—è–¥–æ–≤ (>10K —Ç–æ—á–µ–∫) —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 50-200"
                                    ))
            hampel_window_percent = 0.5  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
        
        hampel_sigma = st.slider("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", 1.0, 5.0, 3.0, step=0.1,
                                help=(
                                    "–ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –º–µ–¥–∏–∞–Ω–Ω–æ–≥–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (MAD):\n"
                                    "‚Ä¢ 3.0 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ~3œÉ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏\n"
                                    "‚Ä¢ –£–º–µ–Ω—å—à–∞–π—Ç–µ –¥–ª—è –±–æ–ª—å—à–µ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"
                                    "‚Ä¢ –£–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π"
                                ))
    
    # IQR
    with st.expander("üìè –ú–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö (IQR)"):
        use_iqr = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å IQR", value=True,
                             help="–ú–µ—Ç–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–≤–∞—Ä—Ç–∏–ª–µ–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
        iqr_multiplier = st.slider("–ú–Ω–æ–∂–∏—Ç–µ–ª—å IQR", 0.5, 5.0, 1.5, step=0.1,
                                  help=(
                                      "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –≤—ã–±—Ä–æ—Å–æ–≤:\n"
                                      "‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 1.5 (–≤—ã—è–≤–ª—è–µ—Ç —É–º–µ—Ä–µ–Ω–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã)\n"
                                      "‚Ä¢ 3.0 –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –≤—ã–±—Ä–æ—Å–æ–≤\n"
                                      "‚Ä¢ –§–æ—Ä–º—É–ª–∞: Q1 - k*IQR –∏ Q3 + k*IQR"
                                  ))
    
    # Plateau detection
    with st.expander("‚è∏ –î–µ—Ç–µ–∫—Ü–∏—è –ø–ª–∞—Ç–æ"):
        use_plateau = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é –ø–ª–∞—Ç–æ", value=True,
                                 help="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–∫–æ–≤ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º")
        plateau_threshold = st.slider("–ü–æ—Ä–æ–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π", 0.0, 0.1, 0.001, step=0.001)
        plateau_duration = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 1, 50, 10)
        detect_nan = st.checkbox("–°—á–∏—Ç–∞—Ç—å NaN –∫–∞–∫ –ø–ª–∞—Ç–æ", value=True,
                                help="–ü–æ–º–µ—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞–∫ –∞–Ω–æ–º–∞–ª–∏–∏")



# ====================
# –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ê–ù–û–ú–ê–õ–ò–ô
# ====================
def detect_all_anomalies(data):
    results = {}
    
    # Z-Score
    if use_zscore:
        z_outliers = z_score_detection(data, z_threshold)
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –∏–º–µ–Ω–Ω–æ numpy array
        results['z_outliers'] = np.asarray(z_outliers)
    
    # Hampel - –æ–±–Ω–æ–≤–ª—è–µ–º –≤—ã–∑–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    if use_hampel:
        hampel_result = hampel_filter(data, 
                                    window=hampel_window, 
                                    sigma=hampel_sigma,
                                    adaptive_window=hampel_adaptive,
                                    window_percent=hampel_window_percent)
        results['hampel_outliers'] = np.asarray(hampel_result)
    
    # IQR
    if use_iqr:
        iqr_outliers, iqr_bounds = iqr_detection(data, iqr_multiplier)
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –∏–º–µ–Ω–Ω–æ numpy array
        results['iqr_outliers'] = np.asarray(iqr_outliers)
        results['iqr_bounds'] = iqr_bounds
    
    # Plateau
    if use_plateau:
        plateau = detect_plateau(data.fillna(0), 
                                threshold=plateau_threshold,
                                min_duration=plateau_duration)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π {start, end} –≤ –±—É–ª–µ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ —Ç–æ—á–µ–∫ –ø–ª–∞—Ç–æ
        plateau_mask = np.zeros(len(data), dtype=bool)
        for p in plateau:
            plateau_mask[p['start']:p['end']+1] = True
        results['plateau_outliers'] = plateau_mask
    
    return results


anomalies = detect_all_anomalies(df['data'])

# ====================
# –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø
# ====================
st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä—è–¥–∞ –∏ –∞–Ω–æ–º–∞–ª–∏–π")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥–æ–≤
method_names = {
    'z_outliers': 'Z-–º–µ—Ç–æ–¥',
    'hampel_outliers': '–§–∏–ª—å—Ç—Ä –•–∞–º–ø–µ–ª—è',
    'iqr_outliers': '–ú–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥',
    'plateau_outliers': '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–ª–∞—Ç–æ'
}

colors = {
    'z_outliers': ('red', 'circle'),
    'hampel_outliers': ('black', 'triangle-up'),
    'iqr_outliers': ('green', 'x'),
    'plateau_outliers': ('purple', 'square')
}

method_flags = {
    'z_outliers': use_zscore,
    'hampel_outliers': use_hampel, 
    'iqr_outliers': use_iqr,
    'plateau_outliers': use_plateau
}

fig = make_subplots()

# –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
if data_source == "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" and 'original' in df.columns:
    fig.add_trace(go.Scatter(
        x=df['time'], 
        y=df['original'],
        mode='lines',
        name='–ò—Å—Ö–æ–¥–Ω—ã–π —Ä—è–¥',
        line=dict(color='lightblue', width=1, dash='dot'),
        opacity=0.6
    ))

fig.add_trace(go.Scatter(
    x=df['time'], 
    y=df['data'],
    mode='lines',
    name='–†—è–¥ —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏' if data_source == "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" else '–ò—Å—Ö–æ–¥–Ω—ã–π —Ä—è–¥',
    line=dict(color='blue', width=1.5),
    opacity=0.7
))

for method in colors.keys():
    if method in anomalies and len(anomalies[method]) > 0:
        idx = np.where(anomalies[method])[0]
        if len(idx) > 0:
            fig.add_trace(go.Scatter(
                x=df.iloc[idx]['time'],
                y=df.iloc[idx]['data'],
                mode='markers',
                name=method_names[method],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                marker=dict(
                    color=colors[method][0],
                    size=10,
                    symbol=colors[method][1],
                    line=dict(width=2, color='white')
                ),
                visible=True if method_flags[method] else 'legendonly',
                uid=method
            ))

if use_iqr:
    iqr_lower, iqr_upper = anomalies.get('iqr_bounds', (None, None))
    if iqr_lower is not None and iqr_upper is not None:
        fig.add_hline(y=iqr_lower, line_dash="dot", line_color="green", opacity=0.5, name="–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ IQR")
        fig.add_hline(y=iqr_upper, line_dash="dot", line_color="green", opacity=0.5, name="–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ IQR")

fig.update_layout(
    title="–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏",
    xaxis_title="–í—Ä–µ–º—è",
    yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ",
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="right",
        x=1,
        itemclick=False,
        itemdoubleclick=False
    ),
    height=600,
    hovermode='x unified',
    uirevision='constant'
)

st.plotly_chart(fig, use_container_width=True, config={'displayModeBar': True})


# ====================
# –°–¢–ê–¢–ò–°–¢–ò–ö–ê
# ====================
st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π")

stats = []
if use_zscore: 
    z_outliers = anomalies.get('z_outliers', [])
    z_count = np.count_nonzero(z_outliers) if len(z_outliers) > 0 else 0
    stats.append(("Z-–º–µ—Ç–æ–¥", z_count))
    
if use_hampel: 
    hampel_outliers = anomalies.get('hampel_outliers', [])
    hampel_count = np.count_nonzero(hampel_outliers) if len(hampel_outliers) > 0 else 0
    stats.append(("–§–∏–ª—å—Ç—Ä –•–∞–º–ø–µ–ª—è", hampel_count))
    
if use_iqr: 
    iqr_outliers = anomalies.get('iqr_outliers', [])
    iqr_count = np.count_nonzero(iqr_outliers) if len(iqr_outliers) > 0 else 0
    stats.append(("–ú–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥", iqr_count))
    
if use_plateau: 
    plateau_outliers = anomalies.get('plateau_outliers', [])
    plateau_count = np.count_nonzero(plateau_outliers) if len(plateau_outliers) > 0 else 0
    stats.append(("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–ª–∞—Ç–æ", plateau_count))

cols = st.columns(len(stats))
for i, (name, value) in enumerate(stats):
    cols[i].metric(name, value)

# ====================
# –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –ê–ù–û–ú–ê–õ–ò–ô
# ====================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–Ω–µ–¥—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
has_injected_anomalies = (any(st.session_state.anomalies.values()) 
                          and (data_source == "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ" or 
                              (data_source == "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" and "original" in df.columns)))

st.subheader("–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π")

if has_injected_anomalies:
    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏, –≤–∫–ª—é—á–∞–µ–º –æ–ø—Ü–∏—é –æ—Ü–µ–Ω–∫–∏
    enable_evaluation = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è", value=True,
                                   help="–í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ Precision, Recall –∏ F1-score –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞")
    
    if enable_evaluation:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–Ω–µ–¥—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏—è—Ö
        if data_source == "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ":
            # –î–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º metadata
            injected_anomalies = metadata
        else:
            # –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            injected_anomalies = metadata
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ-–º–∞—Å–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∞–Ω–æ–º–∞–ª–∏–π –ø–µ—Ä–µ–¥ –æ—Ü–µ–Ω–∫–æ–π
        anomalies_for_evaluation = {}
        for method_name, detection_result in anomalies.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º iqr_bounds –∏ –¥—Ä—É–≥–∏–µ –Ω–µ-–º–∞—Å–∫–∏
            if method_name == 'iqr_bounds':
                continue
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º pandas Series/DataFrame –≤ numpy array –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if isinstance(detection_result, (pd.Series, pd.DataFrame)):
                detection_result = detection_result.values
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            if isinstance(detection_result, np.ndarray) and detection_result.shape == (len(df),):
                if detection_result.dtype == bool:
                    anomalies_for_evaluation[method_name] = detection_result
                elif np.issubdtype(detection_result.dtype, np.number):
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ –±—É–ª–µ–≤–æ–º—É —Ç–∏–ø—É, –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π –º–∞—Å—Å–∏–≤
                    anomalies_for_evaluation[method_name] = detection_result.astype(bool)
        
        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –≤–∫–ª—é—á–µ–Ω—ã –≤ –æ—Ü–µ–Ω–∫—É
        with st.expander("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
            st.write("### –ú–µ—Ç–æ–¥—ã, –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤ –æ—Ü–µ–Ω–∫—É:")
            for method in anomalies_for_evaluation.keys():
                st.write(f"‚úÖ {method_names.get(method, method)}")
                
            st.write("### –ú–µ—Ç–æ–¥—ã, –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–∑ –æ—Ü–µ–Ω–∫–∏:")
            excluded_methods = set(anomalies.keys()) - set(anomalies_for_evaluation.keys()) - {'iqr_bounds'}
            for method in excluded_methods:
                st.write(f"‚ùå {method_names.get(method, method)}")
                if method in anomalies:
                    st.write(f"   –ü—Ä–∏—á–∏–Ω–∞: —Ç–∏–ø={type(anomalies[method])}, —Ñ–æ—Ä–º–∞={getattr(anomalies[method], 'shape', '–ù–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ shape')}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
        try:
            # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–∏–Ω–Ω—É—é –º–∞—Å–∫—É –∞–Ω–æ–º–∞–ª–∏–π –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            true_anomaly_mask = create_true_anomaly_mask(injected_anomalies, len(df))
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics_results = evaluate_anomaly_detection(injected_anomalies, anomalies_for_evaluation, len(df))
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
            if metrics_results:
                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                metrics_df = pd.DataFrame(columns=["–ú–µ—Ç–æ–¥", "Precision", "Recall", "F1-Score"])
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
                for method, metrics in metrics_results.items():
                    # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
                    method_name = method_names.get(method, method)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
                    precision = f"{metrics['precision']:.3f}"
                    recall = f"{metrics['recall']:.3f}"
                    f1 = f"{metrics['f1']:.3f}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ DataFrame
                    new_row = pd.DataFrame({
                        "–ú–µ—Ç–æ–¥": [method_name],
                        "Precision": [precision],
                        "Recall": [recall],
                        "F1-Score": [f1]
                    })
                    metrics_df = pd.concat([metrics_df, new_row], ignore_index=True)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
                st.write("### –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π:")
                st.dataframe(metrics_df, use_container_width=True)
                
                # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                tab1, tab2 = st.tabs(["üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫", "üîç –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–π"])
                
                with tab1:
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ —Å –ø–æ–º–æ—â—å—é –≥—Ä–∞—Ñ–∏–∫–æ–≤
                    fig_metrics = go.Figure()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
                    for idx, metric in enumerate(["precision", "recall", "f1"]):
                        y_values = [metrics[metric] for method, metrics in metrics_results.items()]
                        method_labels = [method_names.get(method, method) for method in metrics_results.keys()]
                        
                        fig_metrics.add_trace(go.Bar(
                            x=method_labels,
                            y=y_values,
                            name=metric.capitalize(),
                            text=[f"{val:.3f}" for val in y_values],
                            textposition='auto'
                        ))
                    
                    fig_metrics.update_layout(
                        title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π",
                        xaxis_title="–ú–µ—Ç–æ–¥",
                        yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏",
                        barmode='group',
                        height=400,
                        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
                    )
                    
                    st.plotly_chart(fig_metrics, use_container_width=True)
                    
                    # –¢–∞–±–ª–∏—Ü–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–µ—Ç—Ä–∏–∫
                    st.markdown("""
                    ### –ü–æ—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
                    
                    | –ú–µ—Ç—Ä–∏–∫–∞ | –û–ø–∏—Å–∞–Ω–∏–µ | –§–æ—Ä–º—É–ª–∞ | –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è |
                    |---------|---------|---------|---------------|
                    | **Precision** (–¢–æ—á–Ω–æ—Å—Ç—å) | –î–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ | TP / (TP + FP) | –í—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π |
                    | **Recall** (–ü–æ–ª–Ω–æ—Ç–∞) | –î–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∞–Ω–æ–º–∞–ª–∏–π | TP / (TP + FN) | –í—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π |
                    | **F1-Score** | –ì–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª–Ω–æ—Ç—ã | 2 √ó (Precision √ó Recall) / (Precision + Recall) | –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Å –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–æ–º –º–µ–∂–¥—É —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ –ø–æ–ª–Ω–æ—Ç–æ–π |
                    
                    –≥–¥–µ:
                    - **TP** (True Positive) ‚Äî –≤–µ—Ä–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
                    - **FP** (False Positive) ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏, –æ—à–∏–±–æ—á–Ω–æ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∫–∞–∫ –∞–Ω–æ–º–∞–ª–∏–∏
                    - **FN** (False Negative) ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
                    """)
                
                with tab2:
                    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–π
                    st.write("### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π")
                    selected_method = st.selectbox(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
                        options=list(metrics_results.keys()),
                        format_func=lambda x: method_names.get(x, x)
                    )
                    
                    if selected_method:
                        # –°—Ç—Ä–æ–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é TP, FP, FN –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
                        detection_mask = anomalies_for_evaluation[selected_method]
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º TP, FP, FN
                        tp_mask = true_anomaly_mask & detection_mask
                        fp_mask = (~true_anomaly_mask) & detection_mask
                        fn_mask = true_anomaly_mask & (~detection_mask)
                        
                        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
                        fig_detection = go.Figure()
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä—è–¥
                        fig_detection.add_trace(go.Scatter(
                            x=df['time'],
                            y=df['data'],
                            mode='lines',
                            name='–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥',
                            line=dict(color='lightgray', width=1.5),
                            opacity=0.7
                        ))
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–∏–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ (–æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Ñ–æ–Ω–µ)
                        if np.any(true_anomaly_mask):
                            idx = np.where(true_anomaly_mask)[0]
                            true_x = df.iloc[idx]['time']
                            # –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—ã –∏—Å—Ç–∏–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
                            for i in range(len(true_x)):
                                fig_detection.add_vrect(
                                    x0=true_x.iloc[i] - 0.1,
                                    x1=true_x.iloc[i] + 0.1,
                                    fillcolor="rgba(220, 220, 220, 0.3)",
                                    layer="below",
                                    line_width=0
                                )
                        
                        # True Positives (–≤–µ—Ä–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ)
                        if np.any(tp_mask):
                            idx = np.where(tp_mask)[0]
                            fig_detection.add_trace(go.Scatter(
                                x=df.iloc[idx]['time'],
                                y=df.iloc[idx]['data'],
                                mode='markers',
                                name='–í–µ—Ä–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ (TP)',
                                marker=dict(
                                    color='green',
                                    size=10,
                                    symbol='circle',
                                    line=dict(width=2, color='white')
                                )
                            ))
                        
                        # False Positives (–ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è)
                        if np.any(fp_mask):
                            idx = np.where(fp_mask)[0]
                            fig_detection.add_trace(go.Scatter(
                                x=df.iloc[idx]['time'],
                                y=df.iloc[idx]['data'],
                                mode='markers',
                                name='–õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (FP)',
                                marker=dict(
                                    color='red',
                                    size=10,
                                    symbol='x',
                                    line=dict(width=2, color='white')
                                )
                            ))
                        
                        # False Negatives (–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏)
                        if np.any(fn_mask):
                            idx = np.where(fn_mask)[0]
                            fig_detection.add_trace(go.Scatter(
                                x=df.iloc[idx]['time'],
                                y=df.iloc[idx]['data'],
                                mode='markers',
                                name='–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ (FN)',
                                marker=dict(
                                    color='orange',
                                    size=10,
                                    symbol='triangle-down',
                                    line=dict(width=2, color='white')
                                )
                            ))
                        
                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –≥—Ä–∞—Ñ–∏–∫–∞
                        fig_detection.update_layout(
                            title=f"–ö–∞—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π: {method_names.get(selected_method, selected_method)}",
                            xaxis_title="–í—Ä–µ–º—è",
                            yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ",
                            legend=dict(
                                orientation="h",
                                yanchor="bottom",
                                y=1.02,
                                xanchor="right",
                                x=1
                            ),
                            height=500,
                            hovermode='closest'
                        )
                        
                        st.plotly_chart(fig_detection, use_container_width=True)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞
                        metrics = metrics_results[selected_method]
                        col1, col2, col3, col4 = st.columns(4)
                        col1.metric("True Positives", np.sum(tp_mask))
                        col2.metric("False Positives", np.sum(fp_mask))
                        col3.metric("False Negatives", np.sum(fn_mask))
                        col4.metric("Precision/Recall", f"{metrics['precision']:.3f} / {metrics['recall']:.3f}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        st.info(f"""
                        **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –º–µ—Ç–æ–¥–∞ {method_names.get(selected_method, selected_method)}:**
                        
                        - **Precision = {metrics['precision']:.3f}**: –º–µ—Ç–æ–¥ –≤–µ—Ä–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç {metrics['precision']*100:.1f}% —Å–ª—É—á–∞–µ–≤ –∏–∑ –≤—Å–µ—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π.
                        - **Recall = {metrics['recall']:.3f}**: –º–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç {metrics['recall']*100:.1f}% –æ—Ç –≤—Å–µ—Ö —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∞–Ω–æ–º–∞–ª–∏–π.
                        - **F1-Score = {metrics['f1']:.3f}**: —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–∞.
                        
                        {'–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å, –Ω–æ –Ω–∏–∑–∫–∞—è –ø–æ–ª–Ω–æ—Ç–∞: –º–µ—Ç–æ–¥ —Ä–µ–¥–∫–æ –æ—à–∏–±–∞–µ—Ç—Å—è, –Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –º–Ω–æ–≥–æ –∞–Ω–æ–º–∞–ª–∏–π.' 
                        if metrics['precision'] > 0.8 and metrics['recall'] < 0.5 else
                        '–í—ã—Å–æ–∫–∞—è –ø–æ–ª–Ω–æ—Ç–∞, –Ω–æ –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: –º–µ—Ç–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π, –Ω–æ —á–∞—Å—Ç–æ –¥–∞—ë—Ç –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è.'
                        if metrics['recall'] > 0.8 and metrics['precision'] < 0.5 else
                        '–•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª–Ω–æ—Ç—ã: –º–µ—Ç–æ–¥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π.'
                        if metrics['precision'] > 0.7 and metrics['recall'] > 0.7 else
                        '–ù–∏–∑–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–µ—Ç–æ–¥–∞.'}
                        """)
            else:
                st.info("–ù–∏ –æ–¥–∏–Ω –∏–∑ –º–µ—Ç–æ–¥–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {str(e)}")
            st.error("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: " + "\n".join(str(e).split("\n")[:5]))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            with st.expander("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
                st.write("### –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:")
                st.write(f"–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å DataFrame: {df.shape}")
                st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—ä–µ—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π: {len(injected_anomalies)}")
                st.write(f"–ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏: {list(anomalies_for_evaluation.keys())}")
                for method, arr in anomalies_for_evaluation.items():
                    st.write(f"{method}: —Ç–∏–ø={type(arr)}, —Ñ–æ—Ä–º–∞={arr.shape}, dtype={arr.dtype}")
else:
    st.info("–î–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –¥–∞–Ω–Ω—ã–µ.")

# ====================
# –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•
# ====================
if data_source == "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" and 'original' in df.columns:
    # –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∞–Ω–æ–º–∞–ª–∏—è–º–∏
    export_df = pd.DataFrame({
        'original_data': df['original'],
        'data_with_anomalies': df['data']
    })
    
    # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π DataFrame –∏–º–µ–ª DatetimeIndex, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    if isinstance(st.session_state.data.index, pd.DatetimeIndex):
        export_df.index = st.session_state.data.index
    
    download_label = "–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏"
    download_filename = 'time_series_with_anomalies.csv'
else:
    # –î–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä—è–¥
    export_df = df
    download_label = "–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
    download_filename = 'synthetic_time_series.csv'

st.download_button(
    label=download_label,
    data=export_df.to_csv(index=True).encode('utf-8'),
    file_name=download_filename,
    mime='text/csv'
)