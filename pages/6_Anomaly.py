import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import itertools

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–∞—Ö", layout="wide")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è
from modules.anomaly_module import (
    generate_anomalous_series,
    add_anomalies_to_existing_data,
    z_score_detection,
    iqr_detection,
    hampel_filter,
    detect_plateau,
    evaluate_anomaly_detection,
    create_true_anomaly_mask,
    run_parameter_experiment,
    get_default_parameter_ranges,
    suggest_optimal_parameters,
    # Add these three functions for report generation
    prepare_anomaly_report_data,
    generate_anomaly_detection_yaml,
    format_anomaly_info_for_report
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –æ—Ç—á–µ—Ç–æ–≤
import modules.reporting as reporting

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'anomalies' not in st.session_state:
    st.session_state.anomalies = {
        'point': [],
        'extended': [],
        'sensor': []
    }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–¥—Ö–æ–¥—É –≤ template
has_loaded_data = 'time_series' in st.session_state and st.session_state.time_series is not None and not st.session_state.time_series.empty

# ====================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ù–¢–ï–†–§–ï–ô–°–ê
# ====================
st.title("–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏")

with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    # –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data_source = st.radio(
        "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö",
        ["–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ", "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"],
        index=1 if has_loaded_data else 0,
        disabled=not has_loaded_data
    )
    
    if data_source == "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" and not has_loaded_data:
        st.warning("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        data_source = "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"
    
    if data_source == "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":
        st.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ –∏–∑ session_state
        main_column = st.session_state.get("main_column", None)
        
        # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏, –µ—Å–ª–∏ main_column –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ - DataFrame —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
        if has_loaded_data:
            time_series = st.session_state.time_series
            
            if isinstance(time_series, pd.DataFrame):
                numeric_cols = time_series.select_dtypes(include=[np.number]).columns.tolist()
                if len(numeric_cols) > 1:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å main_column, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    default_idx = numeric_cols.index(main_column) if main_column in numeric_cols else 0
                    selected_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞–Ω–Ω—ã–º–∏", numeric_cols, index=default_idx)
                elif len(numeric_cols) == 1:
                    selected_column = numeric_cols[0]
                    st.success(f"–í—ã–±—Ä–∞–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü: {selected_column}")
                else:
                    selected_column = None
                    st.error("–ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                    data_source = "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"
            elif isinstance(time_series, pd.Series):
                selected_column = time_series.name if time_series.name else "Value"
                st.success(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥: {selected_column}")
            else:
                st.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(time_series)}")
                data_source = "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    if data_source == "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ":
        st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        n = st.slider("–î–ª–∏–Ω–∞ —Ä—è–¥–∞", 100, 1000, 300)
        season_amp = st.slider("–ê–º–ø–ª–∏—Ç—É–¥–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏", 0.0, 2.0, 0.5)
        noise_std = st.slider("–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞", 0.0, 1.0, 0.2)
    
    # –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π
    st.subheader("–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π")
    
    # –¢–æ—á–µ—á–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
    with st.expander("‚ûï –¢–æ—á–µ—á–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏"):
        point_indices = st.text_input("–ò–Ω–¥–µ–∫—Å—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", key="point_indices")
        point_amp_min = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞", 0.1, 100.0, 1.0, key="point_amp_min")
        point_amp_max = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞", 0.1, 100.0, 2.0, key="point_amp_max")
        point_direction = st.radio("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", ["–í–≤–µ—Ä—Ö", "–í–Ω–∏–∑"], key="point_dir")
        
        if st.button("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–µ—á–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏"):
            try:
                indices = []
                for i in point_indices.split(","):
                    i_clean = i.strip()
                    if i_clean:
                        if not i_clean.isdigit():
                            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {i_clean}")
                        idx = int(i_clean)
                        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω–¥–µ–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                        max_idx = n - 1 if data_source == "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ" else len(st.session_state.time_series) - 1
                        if idx < 0 or idx > max_idx:
                            raise ValueError(f"–ò–Ω–¥–µ–∫—Å {idx} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [0, {max_idx}]")
                        indices.append(idx)
                indices = list(set(indices))  # —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ—á–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π –≤ session_state
                if indices:  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
                    new_anom = {
                        'indices': indices,
                        'amplitude_range': (point_amp_min, point_amp_max),
                        'increase': point_direction == "–í–≤–µ—Ä—Ö"
                    }
                    st.session_state.anomalies['point'].append(new_anom)
                    st.success(f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–æ—á–µ—á–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ –¥–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤: {indices}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {str(e)}")
    
    # –ü—Ä–æ—Ç—è–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
    with st.expander("üìè –ü—Ä–æ—Ç—è–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏"):
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω–¥–µ–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        max_idx = n - 1 if data_source == "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ" else len(st.session_state.time_series) - 1 if has_loaded_data else 299
        
        ext_start = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å", 0, max_idx, min(80, max_idx), key="ext_start")
        ext_duration = st.number_input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 1, min(100, max_idx - ext_start + 1), 
                                       min(25, max_idx - ext_start + 1), key="ext_dur")
        ext_shift = st.number_input("–°–º–µ—â–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è", -100.0, 100.0, -2.5, key="ext_shift")
        
        if st.button("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ç—è–∂–µ–Ω–Ω—É—é –∞–Ω–æ–º–∞–ª–∏—é"):
            new_anom = {
                'start_idx': ext_start,
                'duration': ext_duration,
                'level_shift': ext_shift
            }
            st.session_state.anomalies['extended'].append(new_anom)
            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–Ω–∞—è –∞–Ω–æ–º–∞–ª–∏—è –Ω–∞—á–∏–Ω–∞—è —Å –∏–Ω–¥–µ–∫—Å–∞ {ext_start}")
    
    # –°–±–æ–∏ –¥–∞—Ç—á–∏–∫–æ–≤
    with st.expander("‚ö†Ô∏è –°–±–æ–∏ –¥–∞—Ç—á–∏–∫–æ–≤"):
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω–¥–µ–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        max_idx = n - 1 if data_source == "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ" else len(st.session_state.time_series) - 1 if has_loaded_data else 299
        
        fault_start = st.number_input("–ù–∞—á–∞–ª–æ —Å–±–æ—è", 0, max_idx, min(220, max_idx), key="fault_start")
        fault_duration = st.number_input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–±–æ—è", 1, min(100, max_idx - fault_start + 1), 
                                        min(35, max_idx - fault_start + 1), key="fault_dur")
        fault_value = st.selectbox("–ó–Ω–∞—á–µ–Ω–∏–µ", ["NaN", "0", "1", "–î—Ä—É–≥–æ–µ"], key="fault_val")
        custom_value = st.number_input("–°–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", key="custom_fault") if fault_value == "–î—Ä—É–≥–æ–µ" else None
        
        if st.button("–î–æ–±–∞–≤–∏—Ç—å —Å–±–æ–π –¥–∞—Ç—á–∏–∫–∞"):
            value = np.nan if fault_value == "NaN" else (
                custom_value if fault_value == "–î—Ä—É–≥–æ–µ" else float(fault_value))
            
            new_anom = {
                'start_idx': fault_start,
                'duration': fault_duration,
                'fault_value': value
            }
            st.session_state.anomalies['sensor'].append(new_anom)
            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω —Å–±–æ–π –¥–∞—Ç—á–∏–∫–∞ –Ω–∞—á–∏–Ω–∞—è —Å –∏–Ω–¥–µ–∫—Å–∞ {fault_start}")
    
    # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
    if st.button("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–Ω–æ–º–∞–ª–∏–∏"):
        st.session_state.anomalies = {'point': [], 'extended': [], 'sensor': []}
        st.success("–í—Å–µ –∞–Ω–æ–º–∞–ª–∏–∏ —É–¥–∞–ª–µ–Ω—ã")

# ====================
# –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–õ–ò –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
# ====================
@st.cache_data
def generate_data(params):
    return generate_anomalous_series(**params)

@st.cache_data
def add_anomalies_to_real_data(data, _time, params):
    data_with_anomalies, anomaly_info = add_anomalies_to_existing_data(
        data, _time, 
        point_anomalies=params['point_anomalies'],
        extended_anomalies=params['extended_anomalies'],
        sensor_faults=params['sensor_faults']
    )
    return data_with_anomalies, anomaly_info

try:
    if data_source == "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ":
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        generation_params = {
            'n': n,
            'season_amp': season_amp,
            'noise_std': noise_std,
            'point_anomalies': st.session_state.anomalies['point'],
            'extended_anomalies': st.session_state.anomalies['extended'],
            'sensor_faults': st.session_state.anomalies['sensor']
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –≤—Ä–µ–º—è –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        data, time, metadata = generate_data(generation_params)
        df = pd.DataFrame({'data': data, 'time': time})
        original_data = None
    else:
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ st.session_state.time_series
        time_series = st.session_state.time_series
        
        if isinstance(time_series, pd.Series):
            # –ï—Å–ª–∏ Series, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
            original_data = time_series.values
            time_index = time_series.index
        elif isinstance(time_series, pd.DataFrame) and selected_column in time_series.columns:
            # –ï—Å–ª–∏ DataFrame, –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
            original_data = time_series[selected_column].values
            time_index = time_series.index
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
            st.stop()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏ –∫ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        anomaly_params = {
            'point_anomalies': st.session_state.anomalies['point'],
            'extended_anomalies': st.session_state.anomalies['extended'],
            'sensor_faults': st.session_state.anomalies['sensor']
        }
        
        data_with_anomalies, metadata = add_anomalies_to_real_data(original_data, time_index, anomaly_params)
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        df = pd.DataFrame({
            'original': original_data,
            'data': data_with_anomalies,
            'time': time_index
        })
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π
        data = data_with_anomalies
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    st.stop()

# ====================
# –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ê–°–¢–†–û–ï–ö
# ====================
with st.expander("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–æ–º–∞–ª–∏–π"):
    if not any(st.session_state.anomalies.values()):
        st.write("–ê–Ω–æ–º–∞–ª–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    else:
        anom_list = []
        for anom_type, anoms in st.session_state.anomalies.items():
            for anom in anoms:
                record = {'–¢–∏–ø': anom_type}
                record.update(anom)
                anom_list.append(record)
        
        anom_df = pd.DataFrame(anom_list)
        st.dataframe(
            anom_df,
            column_order=['–¢–∏–ø', 'indices', 'amplitude_range', 
                         'start_idx', 'duration', 'level_shift', 'fault_value'],
            use_container_width=True
        )

# ====================
# –ù–ê–°–¢–†–û–ô–ö–ò –î–ï–¢–ï–ö–¶–ò–ò
# ====================
with st.sidebar:
    st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Å–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
    preset_options = {
        "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π": {
            "z_threshold": 3.0,
            "hampel_window_percent": 0.5,
            "hampel_sigma": 3.0,
            "iqr_multiplier": 1.5,
            "plateau_threshold": 0.001,
            "plateau_duration": 10
        },
        "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π": {
            "z_threshold": 2.0,
            "hampel_window_percent": 0.3,
            "hampel_sigma": 2.0,
            "iqr_multiplier": 1.0,
            "plateau_threshold": 0.0005,
            "plateau_duration": 5
        },
        "–°—Ç—Ä–æ–≥–∏–π": {
            "z_threshold": 4.0,
            "hampel_window_percent": 1.0,
            "hampel_sigma": 4.0,
            "iqr_multiplier": 2.5,
            "plateau_threshold": 0.002,
            "plateau_duration": 15
        },
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π": {}  # –ü—É—Å—Ç–æ–π –ø—Ä–µ—Å–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    }
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ñ–ª–∞–≥–æ–≤ –º–µ—Ç–æ–¥–æ–≤
    # –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–∞—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    use_zscore = True
    use_hampel = True
    use_iqr = True
    use_plateau = True
    
    preset = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫",
        options=list(preset_options.keys()),
        help="–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"
    )
    
    # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (–æ–¥–∏–Ω–∞–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤)
    method_selection = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è",
        options=["Z-Score", "–§–∏–ª—å—Ç—Ä –•–∞–º–ø–µ–ª—è", "IQR", "–ü–ª–∞—Ç–æ"],
        default=["Z-Score", "–§–∏–ª—å—Ç—Ä –•–∞–º–ø–µ–ª—è", "IQR", "–ü–ª–∞—Ç–æ"],
        help="–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    use_zscore = "Z-Score" in method_selection
    use_hampel = "–§–∏–ª—å—Ç—Ä –•–∞–º–ø–µ–ª—è" in method_selection
    use_iqr = "IQR" in method_selection
    use_plateau = "–ü–ª–∞—Ç–æ" in method_selection
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    auto_adjust = st.checkbox(
        "–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", 
        value=False,
        help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ä—è–¥–∞"
    )
    
    if auto_adjust:
        # –†–∞—Å—á–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        data_stats = {
            "mean": float(np.nanmean(df['data'])),
            "std": float(np.nanstd(df['data'])),
            "iqr": float(np.nanpercentile(df['data'], 75) - np.nanpercentile(df['data'], 25)),
            "length": len(df),
            "has_nan": np.isnan(df['data']).any()
        }
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        adapt_z_threshold = max(2.5, min(4.0, 3.0 * data_stats["std"] / (data_stats["iqr"] / 1.35)))
        adapt_hampel_window = max(5, min(50, int(np.sqrt(data_stats["length"]) / 2)))
        adapt_hampel_window_percent = adapt_hampel_window / data_stats["length"] * 100
        adapt_iqr_multiplier = max(1.0, min(3.0, 1.5 * data_stats["std"] / data_stats["iqr"]))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        st.info(f"""
        **–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä—è–¥–∞:**
        - Z-Score –ø–æ—Ä–æ–≥: {adapt_z_threshold:.2f}
        - –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –•–∞–º–ø–µ–ª—è: {adapt_hampel_window} —Ç–æ—á–µ–∫ ({adapt_hampel_window_percent:.2f}%)
        - IQR –º–Ω–æ–∂–∏—Ç–µ–ª—å: {adapt_iqr_multiplier:.2f}
        """)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        z_threshold = adapt_z_threshold
        hampel_window_percent = adapt_hampel_window_percent
        hampel_sigma = 3.0
        iqr_multiplier = adapt_iqr_multiplier
        plateau_threshold = 0.001
        plateau_duration = 10
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–ª—è –•–∞–º–ø–µ–ª—è
        hampel_adaptive = True
        hampel_window = 0  # –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
        # –û–ø—Ü–∏—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–ª–∞—Ç–æ NaN
        detect_nan = True
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø—Ä–µ—Å–µ—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        use_preset_values = preset != "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ä–µ–∂–∏–º–µ "–ü—Ä–æ—Å—Ç—ã–µ" –∏–ª–∏ "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ"
        parameter_mode = st.radio(
            "–†–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            ["–ü—Ä–æ—Å—Ç–æ–π", "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π"],
            horizontal=True,
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
        )
        
        # Z-Score
        with st.expander("üìà Z-Score –º–µ—Ç–æ–¥", expanded=True):
            use_zscore = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Z-Score", value=True, 
                                    help="–ú–µ—Ç–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è")
            
            # –í —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if parameter_mode == "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π":
                st.markdown("""
                **Z-Score** –∏–∑–º–µ—Ä—è–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:
                - Z > 3: —Ç–æ—á–∫–∞ –æ—Ç—Å—Ç–æ–∏—Ç –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 3 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–∞–Ω–æ–º–∞–ª–∏—è)
                - –ß–µ–º –±–æ–ª—å—à–µ –ø–æ—Ä–æ–≥, —Ç–µ–º –º–µ–Ω—å—à–µ –∞–Ω–æ–º–∞–ª–∏–π –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–æ
                """)
            
            if use_preset_values and preset in preset_options:
                z_threshold = preset_options[preset]["z_threshold"]
                st.info(f"–ü–æ—Ä–æ–≥ Z-Score: {z_threshold} (–∏–∑ –ø—Ä–µ—Å–µ—Ç–∞ '{preset}')")
            else:
                z_threshold = st.slider(
                    "–ü–æ—Ä–æ–≥ Z-Score", 
                    1.0, 5.0, 3.0, step=0.5 if parameter_mode == "–ü—Ä–æ—Å—Ç–æ–π" else 0.1,
                    help=(
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ:\n"
                        "‚Ä¢ 1œÉ ‚âà 68% –¥–∞–Ω–Ω—ã—Ö\n"
                        "‚Ä¢ 2œÉ ‚âà 95% –¥–∞–Ω–Ω—ã—Ö\n"
                        "‚Ä¢ 3œÉ ‚âà 99.7% –¥–∞–Ω–Ω—ã—Ö\n"
                        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 3 (–≤—ã—è–≤–ª—è–µ—Ç —è–≤–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã)"
                    )
                )
            
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            if parameter_mode == "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π" and not use_preset_values:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
                test_thresholds = np.arange(1.0, 5.1, 0.5)
                anomaly_counts = []
                
                for thresh in test_thresholds:
                    anomaly_counts.append(np.sum(z_score_detection(df['data'], thresh)))
                
                # –°—Ç—Ä–æ–∏–º –º–∞–ª–µ–Ω—å–∫–∏–π –≥—Ä–∞—Ñ–∏–∫
                threshold_fig = go.Figure()
                threshold_fig.add_trace(go.Scatter(
                    x=test_thresholds,
                    y=anomaly_counts,
                    mode='lines+markers',
                    name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π'
                ))
                threshold_fig.add_vline(
                    x=z_threshold, 
                    line_dash="dash", 
                    line_color="red",
                    annotation_text=f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥: {z_threshold}",
                    annotation_position="top right"
                )
                threshold_fig.update_layout(
                    title="–í–ª–∏—è–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π",
                    xaxis_title="–ü–æ—Ä–æ–≥ Z-Score",
                    yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π",
                    height=250,
                    margin=dict(l=0, r=0, t=40, b=0)
                )
                st.plotly_chart(threshold_fig, use_container_width=True)
        
        # Hampel
        with st.expander("üîç –§–∏–ª—å—Ç—Ä –•–∞–º–ø–µ–ª—è", expanded=True):
            use_hampel = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –•–∞–º–ø–µ–ª—å", value=True,
                                   help="–£—Å—Ç–æ–π—á–∏–≤—ã–π –º–µ—Ç–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ–¥–∏–∞–Ω –∏ MAD")
            
            # –í —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if parameter_mode == "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π":
                st.markdown("""
                **–§–∏–ª—å—Ç—Ä –•–∞–º–ø–µ–ª—è** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –º–µ–¥–∏–∞–Ω—É –∏ MAD –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤:
                - –ë–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤ –∫ —à—É–º–∞–º –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å Z-Score
                - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è —Ä—è–¥–æ–≤ —Å —Ç—Ä–µ–Ω–¥–∞–º–∏ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å—é
                """)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
            hampel_adaptive = st.checkbox("–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞", value=True, 
                                        help="–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–ª–∏–Ω—ã —Ä—è–¥–∞")
            
            if hampel_adaptive:
                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞
                if use_preset_values and preset in preset_options:
                    hampel_window_percent = preset_options[preset]["hampel_window_percent"]
                    st.info(f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–ª–∏–Ω—ã —Ä—è–¥–∞: {hampel_window_percent}% (–∏–∑ –ø—Ä–µ—Å–µ—Ç–∞ '{preset}')")
                else:
                    hampel_window_percent = st.slider(
                        "–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–ª–∏–Ω—ã —Ä—è–¥–∞ (%)", 
                        0.1, 5.0, 0.5, 
                        step=0.1,
                        help=(
                            "–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–ª–∏–Ω—ã —Ä—è–¥–∞:\n"
                            "‚Ä¢ –ú–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: –≤—ã—à–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º\n"
                            "‚Ä¢ –ë–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –±–æ–ª–µ–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç\n"
                            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 0.5-1% –¥–ª—è –µ–∂–µ–º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª–∏"
                        )
                    )
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                approx_window = max(5, min(int(len(df) * hampel_window_percent / 100), len(df) // 5))
                st.info(f"–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä—è–¥–∞: {approx_window} —Ç–æ—á–µ–∫")
                hampel_window = 0  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ 0, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            else:
                # –ï—Å–ª–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Å–ª–∞–π–¥–µ—Ä –¥–ª—è –æ–∫–Ω–∞
                hampel_window = st.slider(
                    "–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", 
                    5, 500, 20, 
                    step=5,
                    help=(
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–µ–¥–∏–∞–Ω—ã:\n"
                        "‚Ä¢ –ú–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: –≤—ã—à–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º\n"
                        "‚Ä¢ –ë–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: —É—Å—Ç–æ–π—á–∏–≤–µ–µ –∫ —à—É–º–∞–º\n"
                        "–î–ª—è –±–æ–ª—å—à–∏—Ö —Ä—è–¥–æ–≤ (>10K —Ç–æ—á–µ–∫) —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 50-200"
                    )
                )
                hampel_window_percent = 0.5  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
            
            if use_preset_values and preset in preset_options:
                hampel_sigma = preset_options[preset]["hampel_sigma"]
                st.info(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {hampel_sigma} (–∏–∑ –ø—Ä–µ—Å–µ—Ç–∞ '{preset}')")
            else:
                hampel_sigma = st.slider(
                    "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", 
                    1.0, 5.0, 3.0, 
                    step=0.1,
                    help=(
                        "–ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –º–µ–¥–∏–∞–Ω–Ω–æ–≥–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (MAD):\n"
                        "‚Ä¢ 3.0 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ~3œÉ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏\n"
                        "‚Ä¢ –£–º–µ–Ω—å—à–∞–π—Ç–µ –¥–ª—è –±–æ–ª—å—à–µ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"
                        "‚Ä¢ –£–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π"
                    )
                )
            
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            if parameter_mode == "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π" and not use_preset_values:
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown("**–í–ª–∏—è–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞**")
                    st.markdown("""
                    - –ú–∞–ª–µ–Ω—å–∫–æ–µ –æ–∫–Ω–æ: —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º
                    - –ë–æ–ª—å—à–æ–µ –æ–∫–Ω–æ: —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —à—É–º–∞–º, –Ω–æ –º–æ–∂–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏
                    """)
                with col2:
                    st.markdown("**–í–ª–∏—è–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞**")
                    st.markdown("""
                    - –ú–∞–ª–µ–Ω—å–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: –±–æ–ª—å—à–µ –∞–Ω–æ–º–∞–ª–∏–π, –Ω–æ –∏ –ª–æ–∂–Ω—ã—Ö —Ç–æ–∂–µ
                    - –ë–æ–ª—å—à–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: –º–µ–Ω—å—à–µ –∞–Ω–æ–º–∞–ª–∏–π, –Ω–æ –±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è
                    """)
        
        # IQR
        with st.expander("üìè –ú–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö (IQR)"):
            use_iqr = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å IQR", value=True,
                                help="–ú–µ—Ç–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–≤–∞—Ä—Ç–∏–ª–µ–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
            
            # –í —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if parameter_mode == "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π":
                st.markdown("""
                **–ú–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö (IQR)** –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—ã–±—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–≤–∞—Ä—Ç–∏–ª–µ–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:
                - –ù–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –±–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤ –∫ –≤—ã–±—Ä–æ—Å–∞–º
                - –•–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –Ω–µ—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
                """)
            
            if use_preset_values and preset in preset_options:
                iqr_multiplier = preset_options[preset]["iqr_multiplier"]
                st.info(f"–ú–Ω–æ–∂–∏—Ç–µ–ª—å IQR: {iqr_multiplier} (–∏–∑ –ø—Ä–µ—Å–µ—Ç–∞ '{preset}')")
            else:
                iqr_multiplier = st.slider(
                    "–ú–Ω–æ–∂–∏—Ç–µ–ª—å IQR", 
                    0.5, 5.0, 1.5, 
                    step=0.1,
                    help=(
                        "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –≤—ã–±—Ä–æ—Å–æ–≤:\n"
                        "‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 1.5 (–≤—ã—è–≤–ª—è–µ—Ç —É–º–µ—Ä–µ–Ω–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã)\n"
                        "‚Ä¢ 3.0 –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –≤—ã–±—Ä–æ—Å–æ–≤\n"
                        "‚Ä¢ –§–æ—Ä–º—É–ª–∞: Q1 - k*IQR –∏ Q3 + k*IQR"
                    )
                )
                
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            if parameter_mode == "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π" and not use_preset_values:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ –≤—ã–≥–ª—è–¥—è—Ç –≥—Ä–∞–Ω–∏—Ü—ã IQR –Ω–∞ –±–æ–∫—Å–ø–ª–æ—Ç–µ
                q1 = np.nanpercentile(df['data'], 25)
                q3 = np.nanpercentile(df['data'], 75)
                iqr_value = q3 - q1
                lower_bound = q1 - iqr_multiplier * iqr_value
                upper_bound = q3 + iqr_multiplier * iqr_value
                
                boxplot_fig = go.Figure()
                boxplot_fig.add_trace(go.Box(
                    y=df['data'].dropna(),
                    name='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
                    boxpoints='outliers',
                    jitter=0.3,
                    pointpos=-1.8,
                    boxmean=True
                ))
                boxplot_fig.add_hline(
                    y=lower_bound,
                    line_dash="dash", 
                    line_color="red",
                    annotation_text="–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞",
                    annotation_position="left"
                )
                boxplot_fig.add_hline(
                    y=upper_bound,
                    line_dash="dash", 
                    line_color="red",
                    annotation_text="–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞",
                    annotation_position="right"
                )
                boxplot_fig.update_layout(
                    title=f"–ì—Ä–∞–Ω–∏—Ü—ã IQR —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º {iqr_multiplier}",
                    height=250,
                    margin=dict(l=0, r=0, t=40, b=0),
                    showlegend=False
                )
                st.plotly_chart(boxplot_fig, use_container_width=True)
        
        # Plateau detection
        with st.expander("‚è∏ –î–µ—Ç–µ–∫—Ü–∏—è –ø–ª–∞—Ç–æ"):
            use_plateau = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é –ø–ª–∞—Ç–æ", value=True,
                                    help="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–∫–æ–≤ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º")
            
            # –í —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if parameter_mode == "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π":
                st.markdown("""
                **–î–µ—Ç–µ–∫—Ü–∏—è –ø–ª–∞—Ç–æ** –Ω–∞—Ö–æ–¥–∏—Ç —É—á–∞—Å—Ç–∫–∏, –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—á—Ç–∏ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è:
                - –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è "–∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö" –¥–∞—Ç—á–∏–∫–æ–≤
                - –ú–æ–∂–µ—Ç –≤—ã—è–≤–ª—è—Ç—å –ø–µ—Ä–∏–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                """)
            
            if use_preset_values and preset in preset_options:
                plateau_threshold = preset_options[preset]["plateau_threshold"]
                st.info(f"–ü–æ—Ä–æ–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π: {plateau_threshold} (–∏–∑ –ø—Ä–µ—Å–µ—Ç–∞ '{preset}')")
            else:
                plateau_threshold = st.slider(
                    "–ü–æ—Ä–æ–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π", 
                    0.0, 0.1, 0.001, 
                    step=0.001 if parameter_mode == "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π" else 0.005
                )
            
            if use_preset_values and preset in preset_options:
                plateau_duration = preset_options[preset]["plateau_duration"]
                st.info(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {plateau_duration} (–∏–∑ –ø—Ä–µ—Å–µ—Ç–∞ '{preset}')")
            else:
                plateau_duration = st.slider(
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 
                    1, 50, 10
                )
            
            detect_nan = st.checkbox(
                "–°—á–∏—Ç–∞—Ç—å NaN –∫–∞–∫ –ø–ª–∞—Ç–æ", 
                value=True,
                help="–ü–æ–º–µ—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞–∫ –∞–Ω–æ–º–∞–ª–∏–∏"
            )
            
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            if parameter_mode == "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π" and not use_preset_values:
                st.markdown("""
                **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:**
                - **–ü–æ—Ä–æ–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π**: —á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º —Å—Ç—Ä–æ–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ "–ø–ª–∞—Ç–æ"
                - **–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–∞—Å—Ç–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∂–µ–ª–∞–µ–º–æ–≥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞—Ç–æ
                """)

# ====================
# –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ê–ù–û–ú–ê–õ–ò–ô
# ====================
def detect_all_anomalies(data):
    results = {}
    
    # Z-Score
    if use_zscore:
        z_outliers = z_score_detection(data, z_threshold)
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –∏–º–µ–Ω–Ω–æ numpy array
        results['z_outliers'] = np.asarray(z_outliers)
    
    # Hampel
    if use_hampel:
        hampel_result = hampel_filter(data, 
                                    window=hampel_window, 
                                    sigma=hampel_sigma,
                                    adaptive_window=hampel_adaptive,
                                    window_percent=hampel_window_percent)
        results['hampel_outliers'] = np.asarray(hampel_result)
    
    # IQR
    if use_iqr:
        iqr_outliers, iqr_bounds = iqr_detection(data, iqr_multiplier)
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –∏–º–µ–Ω–Ω–æ numpy array
        results['iqr_outliers'] = np.asarray(iqr_outliers)
        results['iqr_bounds'] = iqr_bounds
    
    # Plateau
    if use_plateau:
        plateau = detect_plateau(data.fillna(0), 
                                threshold=plateau_threshold,
                                min_duration=plateau_duration)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π {start, end} –≤ –±—É–ª–µ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ —Ç–æ—á–µ–∫ –ø–ª–∞—Ç–æ
        plateau_mask = np.zeros(len(data), dtype=bool)
        for p in plateau:
            plateau_mask[p['start']:p['end']+1] = True
        results['plateau_outliers'] = plateau_mask
    
    return results


anomalies = detect_all_anomalies(df['data'])

# ====================
# –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø
# ====================
st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä—è–¥–∞ –∏ –∞–Ω–æ–º–∞–ª–∏–π")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥–æ–≤
method_names = {
    'z_outliers': 'Z-–º–µ—Ç–æ–¥',
    'hampel_outliers': '–§–∏–ª—å—Ç—Ä –•–∞–º–ø–µ–ª—è',
    'iqr_outliers': '–ú–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥',
    'plateau_outliers': '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–ª–∞—Ç–æ'
}

colors = {
    'z_outliers': ('red', 'circle'),
    'hampel_outliers': ('black', 'triangle-up'),
    'iqr_outliers': ('green', 'x'),
    'plateau_outliers': ('purple', 'square')
}

method_flags = {
    'z_outliers': use_zscore,
    'hampel_outliers': use_hampel, 
    'iqr_outliers': use_iqr,
    'plateau_outliers': use_plateau
}

fig = make_subplots()

# –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
if data_source == "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" and 'original' in df.columns:
    fig.add_trace(go.Scatter(
        x=df['time'], 
        y=df['original'],
        mode='lines',
        name='–ò—Å—Ö–æ–¥–Ω—ã–π —Ä—è–¥',
        line=dict(color='lightblue', width=1, dash='dot'),
        opacity=0.6
    ))

fig.add_trace(go.Scatter(
    x=df['time'], 
    y=df['data'],
    mode='lines',
    name='–†—è–¥ —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏' if data_source == "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" else '–ò—Å—Ö–æ–¥–Ω—ã–π —Ä—è–¥',
    line=dict(color='blue', width=1.5),
    opacity=0.7
))

for method in colors.keys():
    if method in anomalies and len(anomalies[method]) > 0:
        idx = np.where(anomalies[method])[0]
        if len(idx) > 0:
            fig.add_trace(go.Scatter(
                x=df.iloc[idx]['time'],
                y=df.iloc[idx]['data'],
                mode='markers',
                name=method_names[method],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                marker=dict(
                    color=colors[method][0],
                    size=10,
                    symbol=colors[method][1],
                    line=dict(width=2, color='white')
                ),
                visible=True if method_flags[method] else 'legendonly',
                uid=method
            ))

if use_iqr:
    iqr_lower, iqr_upper = anomalies.get('iqr_bounds', (None, None))
    if iqr_lower is not None and iqr_upper is not None:
        fig.add_hline(y=iqr_lower, line_dash="dot", line_color="green", opacity=0.5, name="–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ IQR")
        fig.add_hline(y=iqr_upper, line_dash="dot", line_color="green", opacity=0.5, name="–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ IQR")

fig.update_layout(
    title="–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏",
    xaxis_title="–í—Ä–µ–º—è",
    yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ",
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="right",
        x=1,
        itemclick=False,
        itemdoubleclick=False
    ),
    height=600,
    hovermode='x unified',
    uirevision='constant'
)

st.plotly_chart(fig, use_container_width=True, config={'displayModeBar': True})


# ====================
# –°–¢–ê–¢–ò–°–¢–ò–ö–ê
# ====================
st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π")

stats = []
if use_zscore: 
    z_outliers = anomalies.get('z_outliers', [])
    z_count = np.count_nonzero(z_outliers) if len(z_outliers) > 0 else 0
    stats.append(("Z-–º–µ—Ç–æ–¥", z_count))
    
if use_hampel: 
    hampel_outliers = anomalies.get('hampel_outliers', [])
    hampel_count = np.count_nonzero(hampel_outliers) if len(hampel_outliers) > 0 else 0
    stats.append(("–§–∏–ª—å—Ç—Ä –•–∞–º–ø–µ–ª—è", hampel_count))
    
if use_iqr: 
    iqr_outliers = anomalies.get('iqr_outliers', [])
    iqr_count = np.count_nonzero(iqr_outliers) if len(iqr_outliers) > 0 else 0
    stats.append(("–ú–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥", iqr_count))
    
if use_plateau: 
    plateau_outliers = anomalies.get('plateau_outliers', [])
    plateau_count = np.count_nonzero(plateau_outliers) if len(plateau_outliers) > 0 else 0
    stats.append(("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–ª–∞—Ç–æ", plateau_count))

cols = st.columns(len(stats))
for i, (name, value) in enumerate(stats):
    cols[i].metric(name, value)

# ====================
# –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –ê–ù–û–ú–ê–õ–ò–ô
# ====================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–Ω–µ–¥—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
has_injected_anomalies = (any(st.session_state.anomalies.values()) 
                          and (data_source == "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ" or 
                              (data_source == "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" and "original" in df.columns)))

st.subheader("–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π")

if has_injected_anomalies:
    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏, –≤–∫–ª—é—á–∞–µ–º –æ–ø—Ü–∏—é –æ—Ü–µ–Ω–∫–∏
    enable_evaluation = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è", value=True,
                                   help="–í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ Precision, Recall –∏ F1-score –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞")
    
    if enable_evaluation:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–Ω–µ–¥—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏—è—Ö
        if data_source == "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ":
            # –î–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º metadata
            injected_anomalies = metadata
        else:
            # –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            injected_anomalies = metadata
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ-–º–∞—Å–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∞–Ω–æ–º–∞–ª–∏–π –ø–µ—Ä–µ–¥ –æ—Ü–µ–Ω–∫–æ–π
        anomalies_for_evaluation = {}
        for method_name, detection_result in anomalies.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º iqr_bounds –∏ –¥—Ä—É–≥–∏–µ –Ω–µ-–º–∞—Å–∫–∏
            if method_name == 'iqr_bounds':
                continue
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º pandas Series/DataFrame –≤ numpy array –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if isinstance(detection_result, (pd.Series, pd.DataFrame)):
                detection_result = detection_result.values
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            if isinstance(detection_result, np.ndarray) and detection_result.shape == (len(df),):
                if detection_result.dtype == bool:
                    anomalies_for_evaluation[method_name] = detection_result
                elif np.issubdtype(detection_result.dtype, np.number):
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ –±—É–ª–µ–≤–æ–º—É —Ç–∏–ø—É, –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π –º–∞—Å—Å–∏–≤
                    anomalies_for_evaluation[method_name] = detection_result.astype(bool)
        
        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –≤–∫–ª—é—á–µ–Ω—ã –≤ –æ—Ü–µ–Ω–∫—É
        with st.expander("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
            st.write("### –ú–µ—Ç–æ–¥—ã, –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤ –æ—Ü–µ–Ω–∫—É:")
            for method in anomalies_for_evaluation.keys():
                st.write(f"‚úÖ {method_names.get(method, method)}")
                
            st.write("### –ú–µ—Ç–æ–¥—ã, –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–∑ –æ—Ü–µ–Ω–∫–∏:")
            excluded_methods = set(anomalies.keys()) - set(anomalies_for_evaluation.keys()) - {'iqr_bounds'}
            for method in excluded_methods:
                st.write(f"‚ùå {method_names.get(method, method)}")
                if method in anomalies:
                    st.write(f"   –ü—Ä–∏—á–∏–Ω–∞: —Ç–∏–ø={type(anomalies[method])}, —Ñ–æ—Ä–º–∞={getattr(anomalies[method], 'shape', '–ù–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ shape')}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
        try:
            # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–∏–Ω–Ω—É—é –º–∞—Å–∫—É –∞–Ω–æ–º–∞–ª–∏–π –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            true_anomaly_mask = create_true_anomaly_mask(injected_anomalies, len(df))
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics_results = evaluate_anomaly_detection(injected_anomalies, anomalies_for_evaluation, len(df))
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
            if metrics_results:
                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                metrics_df = pd.DataFrame(columns=["–ú–µ—Ç–æ–¥", "Precision", "Recall", "F1-Score"])
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
                for method, metrics in metrics_results.items():
                    # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
                    method_name = method_names.get(method, method)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
                    precision = f"{metrics['precision']:.3f}"
                    recall = f"{metrics['recall']:.3f}"
                    f1 = f"{metrics['f1']:.3f}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ DataFrame
                    new_row = pd.DataFrame({
                        "–ú–µ—Ç–æ–¥": [method_name],
                        "Precision": [precision],
                        "Recall": [recall],
                        "F1-Score": [f1]
                    })
                    metrics_df = pd.concat([metrics_df, new_row], ignore_index=True)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
                st.write("### –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π:")
                st.dataframe(metrics_df, use_container_width=True)
                
                # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                tab1, tab2 = st.tabs(["üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫", "üîç –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–π"])
                
                with tab1:
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ —Å –ø–æ–º–æ—â—å—é –≥—Ä–∞—Ñ–∏–∫–æ–≤
                    fig_metrics = go.Figure()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
                    for idx, metric in enumerate(["precision", "recall", "f1"]):
                        y_values = [metrics[metric] for method, metrics in metrics_results.items()]
                        method_labels = [method_names.get(method, method) for method in metrics_results.keys()]
                        
                        fig_metrics.add_trace(go.Bar(
                            x=method_labels,
                            y=y_values,
                            name=metric.capitalize(),
                            text=[f"{val:.3f}" for val in y_values],
                            textposition='auto'
                        ))
                    
                    fig_metrics.update_layout(
                        title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π",
                        xaxis_title="–ú–µ—Ç–æ–¥",
                        yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏",
                        barmode='group',
                        height=400,
                        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
                    )
                    
                    st.plotly_chart(fig_metrics, use_container_width=True)
                    
                    # –¢–∞–±–ª–∏—Ü–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–µ—Ç—Ä–∏–∫
                    st.markdown("""
                    ### –ü–æ—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
                    
                    | –ú–µ—Ç—Ä–∏–∫–∞ | –û–ø–∏—Å–∞–Ω–∏–µ | –§–æ—Ä–º—É–ª–∞ | –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è |
                    |---------|---------|---------|---------------|
                    | **Precision** (–¢–æ—á–Ω–æ—Å—Ç—å) | –î–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ | TP / (TP + FP) | –í—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π |
                    | **Recall** (–ü–æ–ª–Ω–æ—Ç–∞) | –î–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∞–Ω–æ–º–∞–ª–∏–π | TP / (TP + FN) | –í—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π |
                    | **F1-Score** | –ì–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª–Ω–æ—Ç—ã | 2 √ó (Precision √ó Recall) / (Precision + Recall) | –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Å –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–æ–º –º–µ–∂–¥—É —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ –ø–æ–ª–Ω–æ—Ç–æ–π |
                    
                    –≥–¥–µ:
                    - **TP** (True Positive) ‚Äî –≤–µ—Ä–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
                    - **FP** (False Positive) ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏, –æ—à–∏–±–æ—á–Ω–æ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∫–∞–∫ –∞–Ω–æ–º–∞–ª–∏–∏
                    - **FN** (False Negative) ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
                    """)
                
                with tab2:
                    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–π
                    st.write("### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π")
                    selected_method = st.selectbox(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
                        options=list(metrics_results.keys()),
                        format_func=lambda x: method_names.get(x, x)
                    )
                    
                    if selected_method:
                        # –°—Ç—Ä–æ–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é TP, FP, FN –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
                        detection_mask = anomalies_for_evaluation[selected_method]
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º TP, FP, FN
                        tp_mask = true_anomaly_mask & detection_mask
                        fp_mask = (~true_anomaly_mask) & detection_mask
                        fn_mask = true_anomaly_mask & (~detection_mask)
                        
                        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
                        fig_detection = go.Figure()
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä—è–¥
                        fig_detection.add_trace(go.Scatter(
                            x=df['time'],
                            y=df['data'],
                            mode='lines',
                            name='–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥',
                            line=dict(color='lightgray', width=1.5),
                            opacity=0.7
                        ))
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–∏–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ (–æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Ñ–æ–Ω–µ)
                        if np.any(true_anomaly_mask):
                            idx = np.where(true_anomaly_mask)[0]
                            true_x = df.iloc[idx]['time']
                            # –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—ã –∏—Å—Ç–∏–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
                            for i in range(len(true_x)):
                                fig_detection.add_vrect(
                                    x0=true_x.iloc[i] - 0.1,
                                    x1=true_x.iloc[i] + 0.1,
                                    fillcolor="rgba(220, 220, 220, 0.3)",
                                    layer="below",
                                    line_width=0
                                )
                        
                        # True Positives (–≤–µ—Ä–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ)
                        if np.any(tp_mask):
                            idx = np.where(tp_mask)[0]
                            fig_detection.add_trace(go.Scatter(
                                x=df.iloc[idx]['time'],
                                y=df.iloc[idx]['data'],
                                mode='markers',
                                name='–í–µ—Ä–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ (TP)',
                                marker=dict(
                                    color='green',
                                    size=10,
                                    symbol='circle',
                                    line=dict(width=2, color='white')
                                )
                            ))
                        
                        # False Positives (–ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è)
                        if np.any(fp_mask):
                            idx = np.where(fp_mask)[0]
                            fig_detection.add_trace(go.Scatter(
                                x=df.iloc[idx]['time'],
                                y=df.iloc[idx]['data'],
                                mode='markers',
                                name='–õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (FP)',
                                marker=dict(
                                    color='red',
                                    size=10,
                                    symbol='x',
                                    line=dict(width=2, color='white')
                                )
                            ))
                        
                        # False Negatives (–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏)
                        if np.any(fn_mask):
                            idx = np.where(fn_mask)[0]
                            fig_detection.add_trace(go.Scatter(
                                x=df.iloc[idx]['time'],
                                y=df.iloc[idx]['data'],
                                mode='markers',
                                name='–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ (FN)',
                                marker=dict(
                                    color='orange',
                                    size=10,
                                    symbol='triangle-down',
                                    line=dict(width=2, color='white')
                                )
                            ))
                        
                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –≥—Ä–∞—Ñ–∏–∫–∞
                        fig_detection.update_layout(
                            title=f"–ö–∞—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π: {method_names.get(selected_method, selected_method)}",
                            xaxis_title="–í—Ä–µ–º—è",
                            yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ",
                            legend=dict(
                                orientation="h",
                                yanchor="bottom",
                                y=1.02,
                                xanchor="right",
                                x=1
                            ),
                            height=500,
                            hovermode='closest'
                        )
                        
                        st.plotly_chart(fig_detection, use_container_width=True)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞
                        metrics = metrics_results[selected_method]
                        col1, col2, col3, col4 = st.columns(4)
                        col1.metric("True Positives", np.sum(tp_mask))
                        col2.metric("False Positives", np.sum(fp_mask))
                        col3.metric("False Negatives", np.sum(fn_mask))
                        col4.metric("Precision/Recall", f"{metrics['precision']:.3f} / {metrics['recall']:.3f}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        st.info(f"""
                        **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –º–µ—Ç–æ–¥–∞ {method_names.get(selected_method, selected_method)}:**
                        
                        - **Precision = {metrics['precision']:.3f}**: –º–µ—Ç–æ–¥ –≤–µ—Ä–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç {metrics['precision']*100:.1f}% —Å–ª—É—á–∞–µ–≤ –∏–∑ –≤—Å–µ—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π.
                        - **Recall = {metrics['recall']:.3f}**: –º–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç {metrics['recall']*100:.1f}% –æ—Ç –≤—Å–µ—Ö —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∞–Ω–æ–º–∞–ª–∏–π.
                        - **F1-Score = {metrics['f1']:.3f}**: —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–∞.
                        
                        {'–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å, –Ω–æ –Ω–∏–∑–∫–∞—è –ø–æ–ª–Ω–æ—Ç–∞: –º–µ—Ç–æ–¥ —Ä–µ–¥–∫–æ –æ—à–∏–±–∞–µ—Ç—Å—è, –Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –º–Ω–æ–≥–æ –∞–Ω–æ–º–∞–ª–∏–π.' 
                        if metrics['precision'] > 0.8 and metrics['recall'] < 0.5 else
                        '–í—ã—Å–æ–∫–∞—è –ø–æ–ª–Ω–æ—Ç–∞, –Ω–æ –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: –º–µ—Ç–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π, –Ω–æ —á–∞—Å—Ç–æ –¥–∞—ë—Ç –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è.'
                        if metrics['recall'] > 0.8 and metrics['precision'] < 0.5 else
                        '–•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª–Ω–æ—Ç—ã: –º–µ—Ç–æ–¥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π.'
                        if metrics['precision'] > 0.7 and metrics['recall'] > 0.7 else
                        '–ù–∏–∑–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–µ—Ç–æ–¥–∞.'}
                        """)
            else:
                st.info("–ù–∏ –æ–¥–∏–Ω –∏–∑ –º–µ—Ç–æ–¥–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {str(e)}")
            st.error("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: " + "\n".join(str(e).split("\n")[:5]))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            with st.expander("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
                st.write("### –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:")
                st.write(f"–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å DataFrame: {df.shape}")
                st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—ä–µ—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π: {len(injected_anomalies)}")
                st.write(f"–ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏: {list(anomalies_for_evaluation.keys())}")
                for method, arr in anomalies_for_evaluation.items():
                    st.write(f"{method}: —Ç–∏–ø={type(arr)}, —Ñ–æ—Ä–º–∞={arr.shape}, dtype={arr.dtype}")
else:
    st.info("–î–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –¥–∞–Ω–Ω—ã–µ.")

# ====================
# –ß–ò–°–õ–ï–ù–ù–´–ô –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢
# ====================

st.header("üß™ –ß–∏—Å–ª–µ–Ω–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç", help="–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π")

if has_injected_anomalies:
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
    experiment_tab1, experiment_tab2 = st.tabs([
        "üî¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞", 
        "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã"
    ])
    
    with experiment_tab1:
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")
        
        # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
        exp_method = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
            options=["Z-Score", "IQR", "–§–∏–ª—å—Ç—Ä –•–∞–º–ø–µ–ª—è", "–î–µ—Ç–µ–∫—Ü–∏—è –ø–ª–∞—Ç–æ"],
            format_func=lambda x: x,
            help="–ú–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è"
        )
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        method_mapping = {
            "Z-Score": "z_score",
            "IQR": "iqr",
            "–§–∏–ª—å—Ç—Ä –•–∞–º–ø–µ–ª—è": "hampel",
            "–î–µ—Ç–µ–∫—Ü–∏—è –ø–ª–∞—Ç–æ": "plateau"
        }
        internal_method = method_mapping[exp_method]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_ranges = get_default_parameter_ranges()
        method_params = default_ranges.get(internal_method, {})
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
        st.write("### –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
        available_params = list(method_params.keys())
        param_names_mapping = {
            "threshold": "–ü–æ—Ä–æ–≥ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            "multiplier": "–ú–Ω–æ–∂–∏—Ç–µ–ª—å IQR",
            "window": "–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ (—Ç–æ—á–µ–∫)",
            "sigma": "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            "window_percent": "–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ (% –æ—Ç –¥–ª–∏–Ω—ã —Ä—è–¥–∞)",
            "min_duration": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–æ",
        }
        
        # –°–æ–∑–¥–∞–µ–º —É–¥–æ–±–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        readable_params = [param_names_mapping.get(p, p) for p in available_params]
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç, –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∫–ª—é—á–∏—Ç—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
        selected_readable_params = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)",
            options=readable_params,
            default=[readable_params[0]] if readable_params else [],
            help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
        )
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        reverse_mapping = {v: k for k, v in param_names_mapping.items()}
        selected_params = [reverse_mapping.get(p, p) for p in selected_readable_params]
        
        # –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        if not selected_params:
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            st.stop()
        
        param_ranges = {}
        fixed_params = {}
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        col1, col2 = st.columns(2)
        
        # –î–ª—è Z-Score
        if internal_method == "z_score":
            with col1:
                st.write("#### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
                for param in selected_params:
                    if param == "threshold":
                        threshold_min = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞", 0.5, 10.0, 1.0, 0.5)
                        threshold_max = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞", threshold_min, 10.0, 5.0, 0.5)
                        threshold_step = st.number_input("–®–∞–≥ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞", 0.1, 1.0, 0.5, 0.5)
                        
                        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π
                        threshold_range = np.arange(threshold_min, threshold_max + threshold_step/2, threshold_step).tolist()
                        param_ranges['threshold'] = threshold_range
        
        with col2:
            st.write("#### –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
            if "threshold" in selected_params:
                st.markdown("""
                **–ü–æ—Ä–æ–≥ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:**
                * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–∞
                * –ú–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Üí –±–æ–ª—å—à–µ –∞–Ω–æ–º–∞–ª–∏–π
                * –ë–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Üí –º–µ–Ω—å—à–µ –∞–Ω–æ–º–∞–ª–∏–π, –Ω–æ –±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è
                * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 3.0
                """)
    
            # –î–ª—è IQR
            elif internal_method == "iqr":
                with col1:
                    st.write("#### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
                    for param in selected_params:
                        if param == "multiplier":
                            multiplier_min = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è", 0.5, 5.0, 0.5, 0.5)
                            multiplier_max = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è", multiplier_min, 5.0, 3.0, 0.5)
                            multiplier_step = st.number_input("–®–∞–≥ –∑–Ω–∞—á–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è", 0.1, 1.0, 0.5, 0.1)
                            
                            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π
                            multiplier_range = np.arange(multiplier_min, multiplier_max + multiplier_step/2, multiplier_step).tolist()
                            param_ranges['multiplier'] = multiplier_range
                
                with col2:
                    st.write("#### –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
                    if "multiplier" in selected_params:
                        st.markdown("""
                        **–ú–Ω–æ–∂–∏—Ç–µ–ª—å IQR:**
                        * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –≤—ã–±—Ä–æ—Å–æ–≤: Q1 - k*IQR –∏ Q3 + k*IQR
                        * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 1.5 (—É–º–µ—Ä–µ–Ω–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã)
                        * 3.0 –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –≤—ã–±—Ä–æ—Å–æ–≤
                        """)
            
            # –î–ª—è Hampel
            elif internal_method == "hampel":
                with col1:
                    st.write("#### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
                    for param in selected_params:
                        if param == "window":
                            window_min = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞", 3, 100, 5, 1)
                            window_max = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞", window_min, 200, 30, 5)
                            window_step = st.number_input("–®–∞–≥ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞", 1, 20, 5, 1)
                            
                            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π
                            window_range = range(window_min, window_max + 1, window_step)
                            param_ranges['window'] = list(window_range)
                            
                            # –ï—Å–ª–∏ –æ–∫–Ω–æ –≤—ã–±—Ä–∞–Ω–æ –∫–∞–∫ –∏–∑–º–µ–Ω—è–µ–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º adaptive_window –≤ False
                            fixed_params['adaptive_window'] = False
                        
                        if param == "sigma":
                            sigma_min = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞", 0.5, 5.0, 1.0, 0.5)
                            sigma_max = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞", sigma_min, 10.0, 4.0, 0.5)
                            sigma_step = st.number_input("–®–∞–≥ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞", 0.1, 1.0, 0.5, 0.1)
                            
                            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π
                            sigma_range = np.arange(sigma_min, sigma_max + sigma_step/2, sigma_step).tolist()
                            param_ranges['sigma'] = sigma_range
                        
                        if param == "window_percent":
                            wp_min = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç", 0.1, 5.0, 0.1, 0.1)
                            wp_max = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç", wp_min, 10.0, 2.0, 0.1)
                            wp_step = st.number_input("–®–∞–≥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞", 0.1, 1.0, 0.2, 0.1)
                            
                            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π
                            wp_range = np.arange(wp_min, wp_max + wp_step/2, wp_step).tolist()
                            param_ranges['window_percent'] = wp_range
                            
                            # –ï—Å–ª–∏ window_percent –≤—ã–±—Ä–∞–Ω –∫–∞–∫ –∏–∑–º–µ–Ω—è–µ–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º adaptive_window –≤ True
                            fixed_params['adaptive_window'] = True
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if "window" in selected_params and "window_percent" in selected_params:
                st.warning("‚ö†Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: '–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞' –∏ '–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ (%)'. –ú–µ—Ç–æ–¥ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º –∏–∑ –Ω–∏—Ö.")
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–∑–º–µ–Ω—è–µ–º—ã–º–∏
            if "window" not in selected_params and "window_percent" not in selected_params:
                st.info("–î–ª—è –º–µ—Ç–æ–¥–∞ –•–∞–º–ø–µ–ª—è –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
                if st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ", value=True):
                    fixed_window_percent = st.number_input("–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–ª–∏–Ω—ã —Ä—è–¥–∞ (%)", 0.1, 5.0, 0.5, 0.1)
                    fixed_params['adaptive_window'] = True
                    fixed_params['window_percent'] = fixed_window_percent
                else:
                    fixed_window = st.number_input("–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ (—Ç–æ—á–µ–∫)", 3, 100, 20, 1)
                    fixed_params['adaptive_window'] = False
                    fixed_params['window'] = fixed_window
            
            if "sigma" not in selected_params:
                fixed_sigma = st.number_input("–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", 1.0, 5.0, 3.0, 0.5)
                fixed_params['sigma'] = fixed_sigma
        
        with col2:
            st.write("#### –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
            if "window" in selected_params:
                st.markdown("""
                **–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ (—Ç–æ—á–µ–∫):**
                * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ–¥–∏–∞–Ω—ã
                * –ú–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Üí –≤—ã—à–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º
                * –ë–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Üí –±–æ–ª—å—à–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —à—É–º–∞–º
                * –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º "–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ (%)"
                """)
            
            if "sigma" in selected_params:
                st.markdown("""
                **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:**
                * –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è MAD (–º–µ–¥–∏–∞–Ω–Ω–æ–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
                * –ú–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Üí –±–æ–ª—å—à–µ –∞–Ω–æ–º–∞–ª–∏–π –±—É–¥–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ
                * –ë–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Üí —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
                * 3.0 –ø—Ä–∏–º–µ—Ä–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 3œÉ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
                """)
            
            if "window_percent" in selected_params:
                st.markdown("""
                **–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ (% –æ—Ç –¥–ª–∏–Ω—ã —Ä—è–¥–∞):**
                * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∫ –¥–ª–∏–Ω–µ —Ä—è–¥–∞
                * –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 0.5-1% –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å –≤—ã—Å–æ–∫–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
                * 1-3% –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∏–∑–∫–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
                * –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º "–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ (—Ç–æ—á–µ–∫)"
                """)
    
            # –î–ª—è Plateau
            elif internal_method == "plateau":
                with col1:
                    st.write("#### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
                    for param in selected_params:
                        if param == "threshold":
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫—É—é —à–∫–∞–ª—É –¥–ª—è –ø–æ—Ä–æ–≥–∞
                            threshold_min_exp = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ (10^x)", -6, -1, -4)
                            threshold_max_exp = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ (10^x)", threshold_min_exp, 0, -2)
                            num_steps = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫", 3, 20, 10, 1)
                            
                            # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π
                            threshold_range = np.logspace(threshold_min_exp, threshold_max_exp, num_steps).tolist()
                            param_ranges['threshold'] = threshold_range
                        
                        if param == "min_duration":
                            duration_min = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 1, 20, 2, 1)
                            duration_max = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", duration_min, 100, 30, 1)
                            duration_step = st.number_input("–®–∞–≥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", 1, 10, 2, 1)
                            
                            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π
                            duration_range = range(duration_min, duration_max + 1, duration_step)
                            param_ranges['min_duration'] = list(duration_range)
                
                with col2:
                    st.write("#### –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
                    if "threshold" in selected_params:
                        st.markdown("""
                        **–ü–æ—Ä–æ–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π:**
                        * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞—Ç–æ
                        * –ú–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Üí –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ "–ø–ª–∞—Ç–æ"
                        * –ë–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Üí –±–æ–ª—å—à–µ —É—á–∞—Å—Ç–∫–æ–≤ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –ø–ª–∞—Ç–æ
                        """)
                    
                    if "min_duration" in selected_params:
                        st.markdown("""
                        **–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–æ:**
                        * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø–ª–∞—Ç–æ
                        * –ú–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Üí –±–æ–ª—å—à–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–ª–∞—Ç–æ –±—É–¥–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ
                        * –ë–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Üí —Ç–æ–ª—å–∫–æ –¥–ª–∏–Ω–Ω—ã–µ –ø–ª–∞—Ç–æ
                        """)

    # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –∏ –æ—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    num_experiments = np.prod([len(values) for values in param_ranges.values()])
    
    st.subheader("–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")
    st.info(f"""
    **–ú–µ—Ç–æ–¥: {exp_method}**
    –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(selected_readable_params)}
    
    –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {num_experiments} —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤.
    """)
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
    if num_experiments > 500:
        st.warning(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ {num_experiments} —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤, —á—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–º–µ–Ω—å—à–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
    run_experiment = st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç", type="primary")
    
    if run_experiment:
        with st.spinner("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞..."):
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–∏–Ω–Ω—É—é –º–∞—Å–∫—É –∞–Ω–æ–º–∞–ª–∏–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            if data_source == "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ":
                injected_anomalies = metadata
            else:
                injected_anomalies = metadata
            
            true_anomaly_mask = create_true_anomaly_mask(injected_anomalies, len(df))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
            experiment_results = run_parameter_experiment(
                data=df['data'].values,
                true_anomalies=true_anomaly_mask,
                method=internal_method,
                param_ranges=param_ranges,
                fixed_params=fixed_params
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
            st.session_state.experiment_results = experiment_results
            st.session_state.experiment_method = internal_method
            st.session_state.experiment_params = list(param_ranges.keys())
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.success("–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")

    # –í–∫–ª–∞–¥–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    with experiment_tab2:
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")
        
        if 'experiment_results' in st.session_state:
            results_df = st.session_state.experiment_results
            method = st.session_state.experiment_method
            params = st.session_state.experiment_params
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            st.write(f"### üìä –í—Å–µ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {len(results_df)}")
            
            # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            optimal_params = suggest_optimal_parameters(results_df)
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.write("#### ü•á –õ—É—á—à–∏–π F1-Score")
                best_f1 = optimal_params['best_f1']
                st.info(f"""
                **F1-Score: {best_f1['f1']:.3f}**
                Precision: {best_f1['precision']:.3f}
                Recall: {best_f1['recall']:.3f}
                
                –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
                {', '.join([f'{key}: {value}' for key, value in best_f1.items() if key in params])}
                """)
            
            with col2:
                st.write("#### üéØ –õ—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (Precision)")
                best_precision = optimal_params['best_precision']
                st.info(f"""
                **Precision: {best_precision['precision']:.3f}**
                Recall: {best_precision['recall']:.3f}
                F1-Score: {best_precision['f1']:.3f}
                
                –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
                {', '.join([f'{key}: {value}' for key, value in best_precision.items() if key in params])}
                """)
            
            with col3:
                st.write("#### üîç –õ—É—á—à–∞—è –ø–æ–ª–Ω–æ—Ç–∞ (Recall)")
                best_recall = optimal_params['best_recall']
                st.info(f"""
                **Recall: {best_recall['recall']:.3f}**
                Precision: {best_recall['precision']:.3f}
                F1-Score: {best_recall['f1']:.3f}
                
                –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
                {', '.join([f'{key}: {value}' for key, value in best_recall.items() if key in params])}
                """)
            
            # –í—ã–±–æ—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.write("### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
            experiment_dim = len(params)
            
            # –í—ã–±–æ—Ä –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            selected_metric = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:",
                options=["f1", "precision", "recall", "num_anomalies"],
                format_func=lambda x: {"f1": "F1-Score", "precision": "Precision", "recall": "Recall", "num_anomalies": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π"}[x]
            )
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
            if experiment_dim == 1:
                # –û–¥–Ω–æ–º–µ—Ä–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                param = params[0]
                
                # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                fig_metrics = go.Figure()
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º DataFrame –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                sorted_df = results_df.sort_values(param)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
                fig_metrics.add_trace(go.Scatter(
                    x=sorted_df[param], 
                    y=sorted_df['precision'],
                    mode='lines+markers',
                    name='Precision',
                    line=dict(color='green', width=2)
                ))
                
                fig_metrics.add_trace(go.Scatter(
                    x=sorted_df[param], 
                    y=sorted_df['recall'],
                    mode='lines+markers',
                    name='Recall',
                    line=dict(color='blue', width=2)
                ))
                
                fig_metrics.add_trace(go.Scatter(
                    x=sorted_df[param], 
                    y=sorted_df['f1'],
                    mode='lines+markers',
                    name='F1-Score',
                    line=dict(color='red', width=2)
                ))
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –≥—Ä–∞—Ñ–∏–∫–∞
                fig_metrics.update_layout(
                    title=f"–í–ª–∏—è–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {param} –Ω–∞ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞",
                    xaxis_title=param,
                    yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏",
                    yaxis=dict(range=[0, 1.05]),
                    height=500,
                    hovermode="x unified",
                    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
                )
                
                st.plotly_chart(fig_metrics, use_container_width=True)
                
            elif experiment_dim == 2:
                # –î–≤—É–º–µ—Ä–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
                param1, param2 = params
                
                # –ú–æ–∂–Ω–æ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
                try:
                    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
                    pivot_df = results_df.pivot(index=param1, columns=param2, values=selected_metric)
                    
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ –≤–∏–¥–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
                    fig_heatmap = go.Figure(data=go.Heatmap(
                        z=pivot_df.values,
                        x=pivot_df.columns,
                        y=pivot_df.index,
                        colorscale='Viridis',
                        colorbar=dict(title=selected_metric.capitalize()),
                        hoverongaps=False,
                        hovertemplate=f"{param1}: %{{y}}<br>{param2}: %{{x}}<br>{selected_metric}: %{{z}}<extra></extra>"
                    ))
                    
                    fig_heatmap.update_layout(
                        title=f"–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ {selected_metric} –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç {param1} –∏ {param2}",
                        xaxis_title=param2,
                        yaxis_title=param1,
                        height=600
                    )
                    
                    st.plotly_chart(fig_heatmap, use_container_width=True)
                    
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ –≤–∏–¥–µ 3D –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
                    fig_3d = go.Figure(data=[go.Surface(
                        z=pivot_df.values,
                        x=pivot_df.columns,
                        y=pivot_df.index,
                        colorscale='Viridis',
                        colorbar=dict(title=selected_metric.capitalize())
                    )])
                    
                    fig_3d.update_layout(
                        title=f"3D-–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å {selected_metric} –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç {param1} –∏ {param2}",
                        scene=dict(
                            xaxis_title=param2,
                            yaxis_title=param1,
                            zaxis_title=selected_metric
                        ),
                        height=600
                    )
                    
                    st.plotly_chart(fig_3d, use_container_width=True)
                    
                except Exception as e:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é: {str(e)}")
                    st.info("–í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–º–µ—é—Ç –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã.")
                
            elif experiment_dim >= 3:
                # –ú–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç (3+ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
                st.write("#### –ú–Ω–æ–≥–æ–º–µ—Ä–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
                
                # –í—ã–±–æ—Ä –¥–≤—É—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                viz_params = st.multiselect(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:",
                    options=params,
                    default=params[:2] if len(params) >= 2 else params,
                    max_selections=2,
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –æ—Å—è—Ö X –∏ Y"
                )
                
                if len(viz_params) == 2:
                    param1, param2 = viz_params
                    
                    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –±–æ–ª—å—à–µ –¥–≤—É—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø–æ–∑–≤–æ–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –æ—Å—Ç–∞–≤—à–∏–º—Å—è
                    other_params = [p for p in params if p not in viz_params]
                    
                    if other_params:
                        st.write("#### –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥—Ä—É–≥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")
                        
                        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                        filter_values = {}
                        
                        for param in other_params:
                            unique_values = sorted(results_df[param].unique())
                            if len(unique_values) <= 10:  # –ï—Å–ª–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                                filter_value = st.selectbox(
                                    f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {param}:",
                                    options=unique_values,
                                    index=len(unique_values)//2  # –í—ã–±–∏—Ä–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                               
                                )
                                filter_values[param] = filter_value
                            else:
                                # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–∞–π–¥–µ—Ä
                                min_val = min(unique_values)
                                max_val = max(unique_values)
                                filter_value = st.slider(
                                    f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {param}:",
                                    min_value=min_val,
                                    max_value=max_val,
                                    value=(min_val + max_val)/2,
                                    step=(max_val - min_val)/20
                                )
                                # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö
                                filter_values[param] = min(unique_values, key=lambda x: abs(x - filter_value))
                        
                        # –§–∏–ª—å—Ç—Ä—É–µ–º DataFrame –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
                        filtered_df = results_df.copy()
                        for param, value in filter_values.items():
                            filtered_df = filtered_df[filtered_df[param] == value]
                        
                        st.write(f"#### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ({len(filtered_df)} —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤)")
                        
                        if not filtered_df.empty:
                            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                            try:
                                # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
                                pivot_df = filtered_df.pivot(index=param1, columns=param2, values=selected_metric)
                                
                                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ –≤–∏–¥–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
                                fig_heatmap = go.Figure(data=go.Heatmap(
                                    z=pivot_df.values,
                                    x=pivot_df.columns,
                                    y=pivot_df.index,
                                    colorscale='Viridis',
                                    colorbar=dict(title=selected_metric.capitalize()),
                                    hoverongaps=False,
                                    hovertemplate=f"{param1}: %{{y}}<br>{param2}: %{{x}}<br>{selected_metric}: %{{z}}<extra></extra>"
                                ))
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                                filter_info = ", ".join([f"{p}={v}" for p, v in filter_values.items()])
                                
                                fig_heatmap.update_layout(
                                    title=f"–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ {selected_metric} –¥–ª—è {param1} –∏ {param2} (–ø—Ä–∏ {filter_info})",
                                    xaxis_title=param2,
                                    yaxis_title=param1,
                                    height=600
                                )
                                
                                st.plotly_chart(fig_heatmap, use_container_width=True)
                                
                            except Exception as e:
                                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é: {str(e)}")
                                st.info("–í–æ–∑–º–æ–∂–Ω–æ, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã.")
                        else:
                            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
                    else:
                        # –ï—Å–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
                        try:
                            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
                            pivot_df = results_df.pivot(index=param1, columns=param2, values=selected_metric)
                            
                            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ –≤–∏–¥–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
                            fig_heatmap = go.Figure(data=go.Heatmap(
                                z=pivot_df.values,
                                x=pivot_df.columns,
                                y=pivot_df.index,
                                colorscale='Viridis',
                                colorbar=dict(title=selected_metric.capitalize()),
                                hoverongaps=False,
                                hovertemplate=f"{param1}: %{{y}}<br>{param2}: %{{x}}<br>{selected_metric}: %{{z}}<extra></extra>"
                            ))
                            
                            fig_heatmap.update_layout(
                                title=f"–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ {selected_metric} –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç {param1} –∏ {param2}",
                                xaxis_title=param2,
                                yaxis_title=param1,
                                height=600
                            )
                            
                            st.plotly_chart(fig_heatmap, use_container_width=True)
                            
                        except Exception as e:
                            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é: {str(e)}")
                            st.info("–í–æ–∑–º–æ–∂–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã.")
            else:
                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–≤–Ω–æ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.")
        
            # –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤
            st.write("### –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            st.caption("–õ—É—á—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏ –≤—ã–¥–µ–ª–µ–Ω—ã —Ü–≤–µ—Ç–æ–º: Precision - –∑–µ–ª–µ–Ω—ã–π, Recall - —Å–∏–Ω–∏–π, F1-score - –≥–æ–ª—É–±–æ–π")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã highlight_max
            st.dataframe(
                results_df.sort_values('f1', ascending=False).style.highlight_max(subset=['precision'], color='#a8d08d')
                .highlight_max(subset=['recall'], color='#8db3e2')
                .highlight_max(subset=['f1'], color='#c6e0b4'),
                use_container_width=True
            )
        else:
            st.info("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞'.")

# ====================
# –û–¢–ß–ï–¢–´
# ====================
st.subheader("üìä –û—Ç—á–µ—Ç—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

# Define this function outside any try block
def create_matplotlib_figure_from_plotly(plotly_fig, width=10, height=6):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ Plotly –≤ –≥—Ä–∞—Ñ–∏–∫ Matplotlib –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
    """
    import matplotlib.pyplot as plt
    import numpy as np
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ñ–∏–≥—É—Ä—É Matplotlib
    fig, ax = plt.subplots(figsize=(width, height))
    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç—Ä–µ–π—Å—ã –∏–∑ plotly –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ matplotlib
    for trace in plotly_fig.data:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–≤–æ–π—Å—Ç–≤–∞
        x_data = trace.x if hasattr(trace, 'x') and trace.x is not None else []
        y_data = trace.y if hasattr(trace, 'y') and trace.y is not None else []
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Ç—Ä–µ–π—Å—ã
        if len(x_data) == 0 or len(y_data) == 0:
            continue
            
        name = trace.name if hasattr(trace, 'name') else 'Series'
        mode = trace.mode if hasattr(trace, 'mode') else 'lines'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –ª–∏–Ω–∏–∏
        linestyle = '-'
        if hasattr(trace, 'line') and hasattr(trace.line, 'dash'):
            if trace.line.dash == 'dash':
                linestyle = '--'
            elif trace.line.dash == 'dot':
                linestyle = ':'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç
        color = 'blue'
        if hasattr(trace, 'marker') and hasattr(trace.marker, 'color'):
            color = trace.marker.color
        elif hasattr(trace, 'line') and hasattr(trace.line, 'color'):
            color = trace.line.color
            
        # –†–∏—Å—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if 'lines' in mode and 'markers' in mode:
            ax.plot(x_data, y_data, label=name, linestyle=linestyle, marker='o', color=color)
        elif 'lines' in mode:
            ax.plot(x_data, y_data, label=name, linestyle=linestyle, color=color)
        elif 'markers' in mode:
            ax.scatter(x_data, y_data, label=name, color=color)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –º–µ—Ç–∫–∏ –æ—Å–µ–π
    if hasattr(plotly_fig.layout, 'title') and hasattr(plotly_fig.layout.title, 'text'):
        ax.set_title(plotly_fig.layout.title.text)
    
    if hasattr(plotly_fig.layout, 'xaxis') and hasattr(plotly_fig.layout.xaxis, 'title') and hasattr(plotly_fig.layout.xaxis.title, 'text'):
        ax.set_xlabel(plotly_fig.layout.xaxis.title.text)
        
    if hasattr(plotly_fig.layout, 'yaxis') and hasattr(plotly_fig.layout.yaxis, 'title') and hasattr(plotly_fig.layout.yaxis.title, 'text'):
        ax.set_ylabel(plotly_fig.layout.yaxis.title.text)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if hasattr(plotly_fig, 'layout') and hasattr(plotly_fig.layout, 'shapes'):
        for shape in plotly_fig.layout.shapes:
            if shape.type == 'line':
                if shape.y0 == shape.y1:  # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                    ax.axhline(y=shape.y0, color='green', linestyle='--', alpha=0.5)
                elif shape.x0 == shape.x1:  # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                    ax.axvline(x=shape.x0, color='red', linestyle='--', alpha=0.5)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
    if len(ax.get_lines()) > 0 or len(ax.collections) > 0:
        ax.legend(loc='best')
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    ax.grid(True, linestyle='-', alpha=0.3)
    
    # –£–ª—É—á—à–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
    plt.tight_layout()
    
    return fig

with st.expander("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ–± –∞–Ω–æ–º–∞–ª–∏—è—Ö", expanded=False):
    st.write("### –û—Ç—á–µ—Ç –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π")
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    report_type = st.radio(
        "–¢–∏–ø –æ—Ç—á–µ—Ç–∞",
        ["–ë–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç", "–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏", "–û—Ç—á–µ—Ç –ø–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º"],
        horizontal=True,
        help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
    )
    
    if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", type="primary"):
        try:
            with st.spinner("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞..."):
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞
                detection_params = {
                    "z_score": {
                        "enabled": use_zscore,
                        "threshold": z_threshold if 'z_threshold' in locals() else 3.0
                    },
                    "hampel": {
                        "enabled": use_hampel,
                        "window": hampel_window if 'hampel_window' in locals() else 0,
                        "sigma": hampel_sigma if 'hampel_sigma' in locals() else 3.0,
                        "adaptive_window": hampel_adaptive if 'hampel_adaptive' in locals() else True,
                        "window_percent": hampel_window_percent if 'hampel_window_percent' in locals() else 0.5
                    },
                    "iqr": {
                        "enabled": use_iqr,
                        "multiplier": iqr_multiplier if 'iqr_multiplier' in locals() else 1.5
                    },
                    "plateau": {
                        "enabled": use_plateau,
                        "threshold": plateau_threshold if 'plateau_threshold' in locals() else 0.001,
                        "min_duration": plateau_duration if 'plateau_duration' in locals() else 10,
                        "detect_nan": detect_nan if 'detect_nan' in locals() else True
                    }
                }
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–æ–º–∞–ª–∏—è—Ö –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç
                if data_source == "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ":
                    anomaly_information = metadata
                else:
                    anomaly_information = metadata if 'metadata' in locals() else []
                
                # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–Ω–µ–¥—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏—è—Ö
                metrics_data = None
                if has_injected_anomalies and 'metrics_results' in locals():
                    metrics_data = metrics_results
                
                # –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å
                experiment_data = None
                optimal_params_data = None
                if 'experiment_results' in st.session_state:
                    experiment_data = st.session_state.experiment_results
                    if 'optimal_params' in locals():
                        optimal_params_data = optimal_params
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                report_data = prepare_anomaly_report_data(
                    data=df['data'].values,
                    time_index=df['time'].values,
                    anomaly_info=anomaly_information,
                    detection_results=anomalies,
                    detection_params=detection_params,
                    metrics_results=metrics_data,
                    experiment_results=experiment_data,
                    optimal_params=optimal_params_data
                )
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º YAML
                yaml_section = generate_anomaly_detection_yaml(report_data)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSS
                css = """<style>
                img { 
                    display: block; 
                    margin: 20px auto; 
                    max-width: 100%; 
                    height: auto; 
                    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                    border-radius: 4px;
                }
                table {
                    border-collapse: collapse;
                    width: 100%;
                    margin-bottom: 20px;
                }
                th, td {
                    padding: 8px;
                    text-align: left;
                    border-bottom: 1px solid #ddd;
                }
                th {
                    background-color: #f2f2f2;
                }
                @media print {
                    img {
                        max-width: 100%;
                        page-break-inside: avoid;
                    }
                    h2 { 
                        page-break-before: always; 
                    }
                    h2:first-of-type { 
                        page-break-before: avoid; 
                    }
                }
                </style>"""
                
                # –ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
                md_content = f"{yaml_section}{css}\n"
                md_content += "# –û—Ç—á–µ—Ç –ø–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—é –∞–Ω–æ–º–∞–ª–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–∞—Ö\n\n"
                
                # –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å
                md_content += "## –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
                md_content += f"* **–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö**: {data_source}\n"
                md_content += f"* **–î–ª–∏–Ω–∞ —Ä—è–¥–∞**: {len(df)}\n"
                md_content += f"* **–ù–∞–ª–∏—á–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤**: {'–î–∞' if report_data['has_nan'] else '–ù–µ—Ç'}\n\n"
                
                md_content += "## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n\n"
                md_content += "| –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å | –ó–Ω–∞—á–µ–Ω–∏–µ |\n"
                md_content += "|------------|--------|\n"
                for key, value in report_data['data_stats'].items():
                    md_content += f"| {key} | {value:.4f} |\n"
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
                md_content += "## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π\n\n"
                
                # Z-Score
                md_content += "### Z-Score\n\n"
                z_params = report_data['detection_params']['z_score']
                md_content += f"* **–í–∫–ª—é—á–µ–Ω**: {'–î–∞' if z_params['enabled'] else '–ù–µ—Ç'}\n"
                if z_params['enabled']:
                    md_content += f"* **–ü–æ—Ä–æ–≥**: {z_params['threshold']}\n\n"
                
                # Hampel
                md_content += "### –§–∏–ª—å—Ç—Ä –•–∞–º–ø–µ–ª—è\n\n"
                h_params = report_data['detection_params']['hampel']
                md_content += f"* **–í–∫–ª—é—á–µ–Ω**: {'–î–∞' if h_params['enabled'] else '–ù–µ—Ç'}\n"
                if h_params['enabled']:
                    md_content += f"* **–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ**: {'–î–∞' if h_params['adaptive_window'] else '–ù–µ—Ç'}\n"
                    if h_params['adaptive_window']:
                        md_content += f"* **–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–ª–∏–Ω—ã —Ä—è–¥–∞**: {h_params['window_percent']}%\n"
                    else:
                        md_content += f"* **–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞**: {h_params['window']} —Ç–æ—á–µ–∫\n"
                    md_content += f"* **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏**: {h_params['sigma']}\n\n"
                
                # IQR
                md_content += "### –ú–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö (IQR)\n\n"
                iqr_params = report_data['detection_params']['iqr']
                md_content += f"* **–í–∫–ª—é—á–µ–Ω**: {'–î–∞' if iqr_params['enabled'] else '–ù–µ—Ç'}\n"
                if iqr_params['enabled']:
                    md_content += f"* **–ú–Ω–æ–∂–∏—Ç–µ–ª—å**: {iqr_params['multiplier']}\n\n"
                
                # Plateau
                md_content += "### –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–ª–∞—Ç–æ\n\n"
                p_params = report_data['detection_params']['plateau']
                md_content += f"* **–í–∫–ª—é—á–µ–Ω**: {'–î–∞' if p_params['enabled'] else '–ù–µ—Ç'}\n"
                if p_params['enabled']:
                    md_content += f"* **–ü–æ—Ä–æ–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π**: {p_params['threshold']}\n"
                    md_content += f"* **–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: {p_params['min_duration']} —Ç–æ—á–µ–∫\n"
                    md_content += f"* **–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ NaN**: {'–î–∞' if p_params['detect_nan'] else '–ù–µ—Ç'}\n\n"
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–Ω–µ–¥—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏—è—Ö
                if anomaly_information:
                    md_content += format_anomaly_info_for_report(anomaly_information)
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
                md_content += "## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π\n\n"
                
                md_content += "| –ú–µ—Ç–æ–¥ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π | –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ä—è–¥–∞ |\n"
                md_content += "|-------|-------------------|---------------|\n"
                
                for method, results in report_data['detection_results'].items():
                    method_name = method_names.get(method, method)
                    md_content += f"| {method_name} | {results['count']} | {results['percentage']:.2f}% |\n"
                
                md_content += "\n"
                
                # –ì—Ä–∞—Ñ–∏–∫ –∞–Ω–æ–º–∞–ª–∏–π
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –≤ base64 —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
                has_detected_anomalies = any(np.any(result) for name, result in anomalies.items() if name != 'iqr_bounds' and isinstance(result, np.ndarray))

                if 'fig' in locals() and has_detected_anomalies:
                    try:
                        # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
                        anomaly_img_base64 = reporting.save_plot_to_base64(fig, backend='plotly')
                        md_content += "## –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π\n\n"
                        md_content += f"<img src=\"data:image/png;base64,{anomaly_img_base64}\" alt=\"–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏\">\n\n"
                    except Exception as e:
                        st.warning(f"–ü—Ä—è–º–æ–π —ç–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}. –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥.")
                        try:
                            # –°–æ–∑–¥–∞–µ–º —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –≤ matplotlib
                            mpl_fig = create_matplotlib_figure_from_plotly(fig)
                            anomaly_img_base64 = reporting.save_plot_to_base64(mpl_fig, backend='matplotlib')
                            md_content += "## –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π\n\n"
                            md_content += f"<img src=\"data:image/png;base64,{anomaly_img_base64}\" alt=\"–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏\">\n\n"
                        except Exception as e2:
                            st.error(f"–û–±–∞ –º–µ—Ç–æ–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å: {str(e2)}")
                            md_content += "## –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π\n\n"
                            md_content += "–ì—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º.\n\n"
                else:
                    md_content += "## –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π\n\n"
                    md_content += "–ù–µ –±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–Ω–∞—á–∏–º—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ.\n\n"

                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
                if report_type == "–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏" and metrics_data:
                    md_content += "## –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π\n\n"
                    
                    md_content += "| –ú–µ—Ç–æ–¥ | Precision | Recall | F1-Score |\n"
                    md_content += "|-------|-----------|--------|----------|\n"
                    
                    for method, metrics in metrics_data.items():
                        method_name = method_names.get(method, method)
                        precision = metrics.get('precision', 0)
                        recall = metrics.get('recall', 0)
                        f1 = metrics.get('f1', 0)
                        md_content += f"| {method_name} | {precision:.3f} | {recall:.3f} | {f1:.3f} |\n"
                    
                    md_content += "\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if 'fig_metrics' in locals() and len(metrics_data) > 0:
                        try:
                            metrics_img_base64 = reporting.save_plot_to_base64(fig_metrics, backend='plotly')
                            md_content += "## –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫\n\n"
                            md_content += f"<img src=\"data:image/png;base64,{metrics_img_base64}\" alt=\"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫\">\n\n"
                        except Exception as e:
                            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –º–µ—Ç—Ä–∏–∫ –≤ –æ—Ç—á–µ—Ç: {str(e)}")
                            md_content += "## –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫\n\n"
                            md_content += "–ì—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç kaleido –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ PDF.\n\n"

                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ—Ç—á–µ—Ç –ø–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º
                if report_type == "–û—Ç—á–µ—Ç –ø–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º" and experiment_data is not None:
                    md_content += "## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞\n\n"
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ç–æ–¥–µ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
                    method_display_name = {
                        "z_score": "Z-Score",
                        "iqr": "IQR (–ú–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö)",
                        "hampel": "–§–∏–ª—å—Ç—Ä –•–∞–º–ø–µ–ª—è",
                        "plateau": "–î–µ—Ç–µ–∫—Ü–∏—è –ø–ª–∞—Ç–æ"
                    }.get(st.session_state.experiment_method, st.session_state.experiment_method)
                    
                    md_content += f"### –ú–µ—Ç–æ–¥: {method_display_name}\n\n"
                    md_content += f"#### –í—Å–µ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {len(experiment_data)}\n\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    md_content += "### –î–∏–∞–ø–∞–∑–æ–Ω—ã –∏—Å—Å–ª–µ–¥—É–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
                    md_content += "| –ü–∞—Ä–∞–º–µ—Ç—Ä | –ú–∏–Ω–∏–º—É–º | –ú–∞–∫—Å–∏–º—É–º | –®–∞–≥ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π |\n"
                    md_content += "|----------|---------|---------|-----|-------------------|\n"
                    
                    param_ranges = {}
                    for param in st.session_state.experiment_params:
                        values = experiment_data[param].unique()
                        values.sort()
                        if len(values) > 1:
                            min_val = values[0]
                            max_val = values[-1]
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —à–∞–≥ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                            if len(values) > 2 and all(isinstance(x, (int, float)) for x in values):
                                step = (values[1] - values[0])
                                is_uniform = all(abs((values[i] - values[i-1]) - step) < 1e-6 for i in range(1, len(values)))
                                if is_uniform:
                                    step_display = f"{step}"
                                else:
                                    step_display = "–Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π"
                            else:
                                step_display = "-"
                                
                            md_content += f"| {param} | {min_val} | {max_val} | {step_display} | {len(values)} |\n"
                            param_ranges[param] = values
                    
                    md_content += "\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
                    fixed_params = {}
                    for column in experiment_data.columns:
                        if column not in st.session_state.experiment_params and column not in ['precision', 'recall', 'f1', 'num_anomalies']:
                            values = experiment_data[column].unique()
                            if len(values) == 1:
                                fixed_params[column] = values[0]
                    
                    if fixed_params:
                        md_content += "### –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n\n"
                        md_content += "| –ü–∞—Ä–∞–º–µ—Ç—Ä | –ó–Ω–∞—á–µ–Ω–∏–µ |\n"
                        md_content += "|----------|----------|\n"
                        for param, value in fixed_params.items():
                            md_content += f"| {param} | {value} |\n"
                        md_content += "\n"
                    
                    # –õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
                    md_content += "### –õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º\n\n"
                    
                    # –î–ª—è F1-Score
                    best_f1_idx = experiment_data['f1'].idxmax()
                    best_f1 = experiment_data.loc[best_f1_idx]
                    
                    md_content += "#### –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ F1-Score\n\n"
                    md_content += f"**F1-Score: {best_f1['f1']:.4f}**\n\n"
                    md_content += "| –ü–∞—Ä–∞–º–µ—Ç—Ä | –ó–Ω–∞—á–µ–Ω–∏–µ |\n"
                    md_content += "|----------|----------|\n"
                    
                    for param in st.session_state.experiment_params:
                        md_content += f"| {param} | {best_f1[param]} |\n"
                    
                    md_content += f"| Precision | {best_f1['precision']:.4f} |\n"
                    md_content += f"| Recall | {best_f1['recall']:.4f} |\n"
                    num_anomalies_f1 = best_f1['num_anomalies']
                    if isinstance(num_anomalies_f1, (pd.Series, np.ndarray)):
                        num_anomalies_f1 = num_anomalies_f1.item() if hasattr(num_anomalies_f1, 'item') else int(num_anomalies_f1[0])
                    md_content += f"| –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π | {int(num_anomalies_f1)} |\n\n"
                    
                    # –î–ª—è Precision
                    best_precision_idx = experiment_data['precision'].idxmax()
                    best_precision = experiment_data.loc[best_precision_idx]
                    
                    md_content += "#### –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ Precision\n\n"
                    md_content += f"**Precision: {best_precision['precision']:.4f}**\n\n"
                    md_content += "| –ü–∞—Ä–∞–º–µ—Ç—Ä | –ó–Ω–∞—á–µ–Ω–∏–µ |\n"
                    md_content += "|----------|----------|\n"
                    
                    for param in st.session_state.experiment_params:
                        md_content += f"| {param} | {best_precision[param]} |\n"
                    
                    md_content += f"| F1-Score | {best_precision['f1']:.4f} |\n"
                    md_content += f"| Recall | {best_precision['recall']:.4f} |\n"
                    num_anomalies_precision = best_precision['num_anomalies']
                    if isinstance(num_anomalies_precision, (pd.Series, np.ndarray)):
                        num_anomalies_precision = num_anomalies_precision.item() if hasattr(num_anomalies_precision, 'item') else int(num_anomalies_precision[0])
                    md_content += f"| –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π | {int(num_anomalies_precision)} |\n\n"
                    
                    # –î–ª—è Recall
                    best_recall_idx = experiment_data['recall'].idxmax()
                    best_recall = experiment_data.loc[best_recall_idx]
                    
                    md_content += "#### –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ Recall\n\n"
                    md_content += f"**Recall: {best_recall['recall']:.4f}**\n\n"
                    md_content += "| –ü–∞—Ä–∞–º–µ—Ç—Ä | –ó–Ω–∞—á–µ–Ω–∏–µ |\n"
                    md_content += "|----------|----------|\n"
                    
                    for param in st.session_state.experiment_params:
                        md_content += f"| {param} | {best_recall[param]} |\n"
                    
                    md_content += f"| F1-Score | {best_recall['f1']:.4f} |\n"
                    md_content += f"| Precision | {best_recall['precision']:.4f} |\n"
                    num_anomalies_recall = best_recall['num_anomalies']
                    if isinstance(num_anomalies_recall, (pd.Series, np.ndarray)):
                        num_anomalies_recall = num_anomalies_recall.item() if hasattr(num_anomalies_recall, 'item') else int(num_anomalies_recall[0])
                    md_content += f"| –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π | {int(num_anomalies_recall)} |\n\n"

                    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
                    metrics_to_visualize = ['f1', 'precision', 'recall', 'num_anomalies']
                    metric_titles = {
                        'f1': 'F1-Score',
                        'precision': 'Precision',
                        'recall': 'Recall',
                        'num_anomalies': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π'
                    }
                    
                    md_content += "### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
                    
                    # –ï—Å–ª–∏ —É –Ω–∞—Å –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - —Å–æ–∑–¥–∞–µ–º –ª–∏–Ω–µ–π–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
                    if len(st.session_state.experiment_params) == 1:
                        param = st.session_state.experiment_params[0]
                        
                        for metric in metrics_to_visualize:
                            try:
                                # –°–æ–∑–¥–∞–µ–º matplotlib –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                                plt.figure(figsize=(10, 6))
                                
                                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É
                                sorted_data = experiment_data.sort_values(param)
                                
                                # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
                                plt.plot(sorted_data[param], sorted_data[metric], 'o-', linewidth=2)
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∏ —Å–µ—Ç–∫—É
                                plt.title(f'–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å {metric_titles[metric]} –æ—Ç {param}')
                                plt.xlabel(param)
                                plt.ylabel(metric_titles[metric])
                                plt.grid(True, alpha=0.3)
                                plt.tight_layout()
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ base64
                                img_base64 = reporting.save_plot_to_base64(plt.gcf(), backend='matplotlib')
                                plt.close()
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç
                                md_content += f"#### –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å {metric_titles[metric]} –æ—Ç {param}\n\n"
                                md_content += f"<img src=\"data:image/png;base64,{img_base64}\" alt=\"{metric_titles[metric]} vs {param}\">\n\n"
                            except Exception as e:
                                md_content += f"#### –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å {metric_titles[metric]} –æ—Ç {param}\n\n"
                                md_content += f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫: {str(e)}\n\n"
                    
                    # –ï—Å–ª–∏ —É –Ω–∞—Å –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - —Å–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
                    elif len(st.session_state.experiment_params) == 2:
                        param1, param2 = st.session_state.experiment_params
                        
                        for metric in metrics_to_visualize:
                            try:
                                # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
                                pivot_df = experiment_data.pivot(index=param1, columns=param2, values=metric)
                                
                                # –°–æ–∑–¥–∞–µ–º matplotlib —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
                                plt.figure(figsize=(12, 8))
                                im = plt.imshow(pivot_df.values, cmap='viridis', aspect='auto')
                                plt.colorbar(im, label=f"{metric_titles[metric]} (—Å—Ä–µ–¥–Ω–µ–µ)")
                                
                                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏
                                plt.xticks(range(len(pivot_df.columns)), pivot_df.columns, rotation=45)
                                plt.yticks(range(len(pivot_df.index)), pivot_df.index)
                                
                                plt.xlabel(param2)
                                plt.ylabel(param1)
                                plt.title(f'–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ {metric_titles[metric]} (—É—Å—Ä–µ–¥–Ω–µ–Ω–æ)')
                                plt.tight_layout()
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ base64
                                img_base64 = reporting.save_plot_to_base64(plt.gcf(), backend='matplotlib')
                                plt.close()
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç
                                md_content += f"#### –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ {metric_titles[metric]} (–ø–æ {param1} –∏ {param2})\n\n"
                                md_content += f"<img src=\"data:image/png;base64,{img_base64}\" alt=\"Heatmap {metric}\">\n\n"
                            except Exception as e:
                                md_content += f"#### –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ {metric_titles[metric]}\n\n"
                                md_content += f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É: {str(e)}\n\n"
                    
                    # –î–ª—è –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ (3+ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
                    else:
                        # –í—ã–±–∏—Ä–∞–µ–º –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ –¥–≤–∞)
                        viz_params = st.session_state.experiment_params[:2]
                        param1, param2 = viz_params
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                        md_content += "‚ö†Ô∏è *–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ –¥–≤—É—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ü–æ–∫–∞–∑–∞–Ω—ã –¥–≤–µ –ø–µ—Ä–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ä–µ–¥–Ω–µ–Ω—ã.*\n\n"
                        
                        for metric in metrics_to_visualize:
                            try:
                                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–≤—É–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∏ —É—Å—Ä–µ–¥–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫—É
                                grouped_data = experiment_data.groupby([param1, param2])[metric].mean().reset_index()
                                pivot_df = grouped_data.pivot(index=param1, columns=param2, values=metric)
                                
                                # –°–æ–∑–¥–∞–µ–º matplotlib —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
                                plt.figure(figsize=(12, 8))
                                im = plt.imshow(pivot_df.values, cmap='viridis', aspect='auto')
                                plt.colorbar(im, label=f"{metric_titles[metric]} (—Å—Ä–µ–¥–Ω–µ–µ)")
                                
                                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏
                                plt.xticks(range(len(pivot_df.columns)), pivot_df.columns, rotation=45)
                                plt.yticks(range(len(pivot_df.index)), pivot_df.index)
                                
                                plt.xlabel(param2)
                                plt.ylabel(param1)
                                plt.title(f'–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ {metric_titles[metric]} (—É—Å—Ä–µ–¥–Ω–µ–Ω–æ)')
                                plt.tight_layout()
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ base64
                                img_base64 = reporting.save_plot_to_base64(plt.gcf(), backend='matplotlib')
                                plt.close()
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç
                                md_content += f"#### –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ {metric_titles[metric]} (–ø–æ {param1} –∏ {param2})\n\n"
                                md_content += f"<img src=\"data:image/png;base64,{img_base64}\" alt=\"Heatmap {metric}\">\n\n"
                            except Exception as e:
                                md_content += f"#### –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ {metric_titles[metric]}\n\n"
                                md_content += f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É: {str(e)}\n\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    md_content += "### –ü–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (10 –ª—É—á—à–∏—Ö –ø–æ F1-Score)\n\n"
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ F1-Score –∏ –±–µ—Ä–µ–º 10 –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    top_results = experiment_data.sort_values('f1', ascending=False).head(10)
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
                    md_content += "| ‚Ññ |"
                    for param in st.session_state.experiment_params:
                        md_content += f" {param} |"
                    md_content += " F1-Score | Precision | Recall | –ö–æ–ª-–≤–æ –∞–Ω–æ–º–∞–ª–∏–π |\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
                    md_content += "|---|"
                    for _ in st.session_state.experiment_params:
                        md_content += "---|"
                    md_content += "---|---|---|---|\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    for i, (_, row) in enumerate(top_results.iterrows(), 1):
                        md_content += f"| {i} |"
                        for param in st.session_state.experiment_params:
                            md_content += f" {row[param]} |"
                        md_content += f" {row['f1']:.4f} | {row['precision']:.4f} | {row['recall']:.4f} | {int(row['num_anomalies'])} |\n"
                                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                    file_name = f"anomaly_report_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.md"
                    reporting.download_button_for_text(md_content, file_name, "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (Markdown)")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ PDF –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω pdfkit
                    try:
                        pdf_file_name = file_name.replace('.md', '.pdf')
                        pdf_content = reporting.convert_markdown_to_pdf(md_content)
                        reporting.download_button_for_binary(pdf_content, pdf_file_name, "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (PDF)")
                    except Exception as pdf_error:
                        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF: {str(pdf_error)}. –°–∫–∞—á–∞–π—Ç–µ –≤–µ—Ä—Å–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
            st.error("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏: " + "\n".join(str(e).split("\n")[:5]))
    else:
        st.info("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞'.")
