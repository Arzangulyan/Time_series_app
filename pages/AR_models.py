"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ (ARMA, ARIMA, SARIMA).
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤, –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–µ–π, –æ–±—É—á–µ–Ω–∏—è –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

import streamlit as st
import pandas as pd
import numpy as np
import sys
import os
import matplotlib.pyplot as plt
from datetime import datetime
import warnings

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å Python
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
from modules.autoregressive.core import (
    check_stationarity, apply_differencing, detect_frequency,
    suggest_arima_params
)
from modules.autoregressive.models import (
    ARMAModel, ARIMAModel, SARIMAModel
)
from modules.autoregressive.visualization import (
    plot_time_series, plot_train_test_split, plot_acf_pacf_plotly,
    plot_forecast, plot_forecast_plotly, display_model_information, display_differencing_effect,
    analyze_residuals, plot_residuals_diagnostic, compare_models,
    display_stationarity_results, display_acf_pacf, auto_detect_seasonality, display_residuals_analysis
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –∏ –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–µ–π
from modules.autoregressive.model_selection import (
    check_stationarity as check_stationarity_advanced,
    estimate_differencing_order, detect_seasonality,
    auto_arima, evaluate_model_performance,
    plot_model_results, generate_model_report
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from modules.page_template import (
    setup_page,
    load_time_series,
    run_calculations_on_button_click,
)

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
MODEL_METADATA = {
    "ARMA": {
        "name": "ARMA",
        "full_name": "Auto-Regressive Moving Average",
        "description": """
        **ARMA (Auto-Regressive Moving Average)** - –º–æ–¥–µ–ª—å –¥–ª—è —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤,
        –æ–±—ä–µ–¥–∏–Ω—è—é—â–∞—è –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (AR) –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ (MA).
        
        –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å: ARMA(p, q)
        
        $$y_t = c + \\sum_{i=1}^{p} \\phi_i y_{t-i} + \\sum_{j=1}^{q} \\theta_j \\varepsilon_{t-j} + \\varepsilon_t$$
        
        –≥–¥–µ:
        - $y_t$ - –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ $t$
        - $c$ - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞
        - $\\phi_i$ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–∏
        - $\\theta_j$ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
        - $\\varepsilon_t$ - –±–µ–ª—ã–π —à—É–º
        
        **–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:** –¥–ª—è —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –±–µ–∑ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏.
        """
    },
    "ARIMA": {
        "name": "ARIMA",
        "full_name": "Auto-Regressive Integrated Moving Average",
        "description": """
        **ARIMA (Auto-Regressive Integrated Moving Average)** - —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ARMA –¥–ª—è –Ω–µ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
        —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è).
        
        –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å: ARIMA(p, d, q)
        
        $$\\nabla^d y_t = c + \\sum_{i=1}^{p} \\phi_i \\nabla^d y_{t-i} + \\sum_{j=1}^{q} \\theta_j \\varepsilon_{t-j} + \\varepsilon_t$$
        
        –≥–¥–µ:
        - $\\nabla^d$ - –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ $d$
        - $y_t$ - –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ $t$
        - $c$ - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞
        - $\\phi_i$ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–∏
        - $\\theta_j$ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
        - $\\varepsilon_t$ - –±–µ–ª—ã–π —à—É–º
        
        **–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:** –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ —Å —Ç—Ä–µ–Ω–¥–æ–º, –Ω–æ –±–µ–∑ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–π —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏.
        """
    },
    "SARIMA": {
        "name": "SARIMA",
        "full_name": "Seasonal Auto-Regressive Integrated Moving Average",
        "description": """
        **SARIMA (Seasonal Auto-Regressive Integrated Moving Average)** - —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ARIMA
        –¥–ª—è —É—á–µ—Ç–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–∞—Ö.
        
        –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å: SARIMA(p, d, q)(P, D, Q, s)
        
        $$\\Phi_P(B^s)\\phi_p(B)(1-B)^d(1-B^s)^D y_t = c + \\Theta_Q(B^s)\\theta_q(B)\\varepsilon_t$$
        
        –≥–¥–µ:
        - $B$ - –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–¥–≤–∏–≥–∞ –Ω–∞–∑–∞–¥: $By_t = y_{t-1}$
        - $\\phi_p(B)$ - –Ω–µ—Å–µ–∑–æ–Ω–Ω—ã–π AR –ø–æ–ª–∏–Ω–æ–º –ø–æ—Ä—è–¥–∫–∞ $p$
        - $\\Phi_P(B^s)$ - —Å–µ–∑–æ–Ω–Ω—ã–π AR –ø–æ–ª–∏–Ω–æ–º –ø–æ—Ä—è–¥–∫–∞ $P$
        - $(1-B)^d$ - –Ω–µ—Å–µ–∑–æ–Ω–Ω–æ–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ $d$
        - $(1-B^s)^D$ - —Å–µ–∑–æ–Ω–Ω–æ–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ $D$
        - $\\theta_q(B)$ - –Ω–µ—Å–µ–∑–æ–Ω–Ω—ã–π MA –ø–æ–ª–∏–Ω–æ–º –ø–æ—Ä—è–¥–∫–∞ $q$
        - $\\Theta_Q(B^s)$ - —Å–µ–∑–æ–Ω–Ω—ã–π MA –ø–æ–ª–∏–Ω–æ–º –ø–æ—Ä—è–¥–∫–∞ $Q$
        - $s$ - —Å–µ–∑–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        - $\\varepsilon_t$ - –±–µ–ª—ã–π —à—É–º
        
        **–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:** –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å—é.
        """
    }
}

st.set_page_config(page_title="–ê–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏", page_icon="üìà", layout="wide")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'run_future_forecast' not in st.session_state:
    st.session_state.run_future_forecast = False
if 'future_steps' not in st.session_state:
    st.session_state.future_steps = 12
if 'forecast_results' not in st.session_state:
    st.session_state.forecast_results = None
if 'current_active_model' not in st.session_state:
    st.session_state.current_active_model = None
if 'last_trained_on' not in st.session_state:
    st.session_state.last_trained_on = None

def initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏."""
    # –ú–æ–¥–µ–ª—å
    if 'selected_model_type' not in st.session_state:
        st.session_state.selected_model_type = "ARIMA"
    
    # –î–∞–Ω–Ω—ã–µ
    if 'time_series' not in st.session_state:
        st.session_state.time_series = None
    
    if 'train_data' not in st.session_state:
        st.session_state.train_data = None
    
    if 'test_data' not in st.session_state:
        st.session_state.test_data = None
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–µ–π
    if 'arma_params' not in st.session_state:
        st.session_state.arma_params = {'p': 1, 'q': 1}
    
    if 'arima_params' not in st.session_state:
        st.session_state.arima_params = {'p': 1, 'd': 1, 'q': 1}
    
    if 'sarima_params' not in st.session_state:
        st.session_state.sarima_params = {'p': 1, 'd': 1, 'q': 1, 'P': 0, 'D': 0, 'Q': 0, 's': 12}
    
    # –û–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    if 'current_arma_model' not in st.session_state:
        st.session_state.current_arma_model = None
    
    if 'current_arima_model' not in st.session_state:
        st.session_state.current_arima_model = None
    
    if 'current_sarima_model' not in st.session_state:
        st.session_state.current_sarima_model = None


def get_current_model():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ session_state."""
    model_type = st.session_state.selected_model_type
    
    if model_type == "ARMA":
        return st.session_state.current_arma_model
    elif model_type == "ARIMA":
        return st.session_state.current_arima_model
    elif model_type == "SARIMA":
        return st.session_state.current_sarima_model
    else:
        return None


def set_current_model(model):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –≤ session_state."""
    model_type = st.session_state.selected_model_type
    
    if model_type == "ARMA":
        st.session_state.current_arma_model = model
    elif model_type == "ARIMA":
        st.session_state.current_arima_model = model
    elif model_type == "SARIMA":
        st.session_state.current_sarima_model = model


def fit_selected_model(data, model_type=None):
    """
    –û–±—É—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã—Ö.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -----------
    data : pandas.Series
        –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    model_type : str –∏–ª–∏ None
        –¢–∏–ø –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–∑ session_state.
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    -----------
    object
        –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
    """
    if model_type is None:
        model_type = st.session_state.selected_model_type
    
    try:
        if model_type == "ARMA":
            params = st.session_state.arma_params
            model = ARMAModel(p=params['p'], q=params['q'])
        elif model_type == "ARIMA":
            params = st.session_state.arima_params
            model = ARIMAModel(p=params['p'], d=params['d'], q=params['q'])
        elif model_type == "SARIMA":
            params = st.session_state.sarima_params
            model = SARIMAModel(
                p=params['p'], d=params['d'], q=params['q'],
                P=params['P'], D=params['D'], Q=params['Q'], m=params['s']
            )
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–æ–¥–µ–ª–∏: {model_type}")
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –ø–æ–¥–≥–æ–Ω–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
            model.fit(data)
        except Exception as e:
            if "LU decomposition error" in str(e) or "SVD did not converge" in str(e):
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ 1: —Å –¥—Ä—É–≥–∏–º —Å–æ–ª–≤–µ—Ä–æ–º
                st.warning("–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥–≥–æ–Ω–∫–∏ –º–æ–¥–µ–ª–∏ (LBFGS)...")
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å —Å —Ç–µ–º –∂–µ —Ç–∏–ø–æ–º
                if model_type == "ARMA":
                    new_model = ARMAModel(p=params['p'], q=params['q'])
                elif model_type == "ARIMA":
                    new_model = ARIMAModel(p=params['p'], d=params['d'], q=params['q'])
                elif model_type == "SARIMA":
                    new_model = SARIMAModel(
                        p=params['p'], d=params['d'], q=params['q'],
                        P=params['P'], D=params['D'], Q=params['Q'], m=params['s']
                    )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–ª–≤–µ—Ä–∞
                if hasattr(new_model, 'fit_options'):
                    new_model.fit_options = {'method': 'lbfgs', 'maxiter': 50}
                
                try:
                    new_model.fit(data)
                    model = new_model
                except Exception as e2:
                    # –ï—Å–ª–∏ –∏ –≤—Ç–æ—Ä–æ–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—Å—Ç–∏—Ç—å –º–æ–¥–µ–ª—å
                    st.warning("–ü–æ–ø—ã—Ç–∫–∞ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –º–æ–¥–µ–ª—å (—Å–Ω–∏–∑–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)...")
                    
                    # –£–ø—Ä–æ—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    if model_type == "ARMA":
                        simple_model = ARMAModel(p=max(1, params['p']-1), q=max(1, params['q']-1))
                    elif model_type == "ARIMA":
                        simple_model = ARIMAModel(p=max(1, params['p']-1), d=params['d'], q=max(1, params['q']-1))
                    elif model_type == "SARIMA":
                        simple_model = SARIMAModel(
                            p=max(1, params['p']-1), d=params['d'], q=max(1, params['q']-1),
                            P=max(0, params['P']-1), D=params['D'], Q=max(0, params['Q']-1), m=params['s']
                        )
                    
                    try:
                        simple_model.fit(data)
                        model = simple_model
                        st.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
                    except Exception as e3:
                        # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤—ã–∑—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏. –û—à–∏–±–∫–∞: {str(e3)}")
            else:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–µ–π, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
                raise e
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ session_state
        set_current_model(model)
        
        return model
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {model_type}: {str(e)}")
        return None


def get_forecast_with_data(model, steps, original_data, title):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∫ –≥—Ä–∞—Ñ–∏–∫, —Ç–∞–∫ –∏ DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -----------
    model : BaseTimeSeriesModel
        –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
    steps : int
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    original_data : pd.Series
        –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    title : str
        –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    -----------
    Tuple[go.Figure, pd.DataFrame]
        –ö–æ—Ä—Ç–µ–∂ (–≥—Ä–∞—Ñ–∏–∫ Plotly, DataFrame —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º)
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    forecast = model.predict(steps=steps)
    
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig = plot_forecast_plotly(model, steps=steps, original_data=original_data, title=title)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    forecast_df = pd.DataFrame({'forecast': forecast.values}, index=forecast.index)
    
    # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if hasattr(model.fitted_model, 'get_forecast'):
        try:
            forecast_obj = model.fitted_model.get_forecast(steps=steps)
            conf_interval = forecast_obj.conf_int(alpha=0.05)  # 95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            
            lower_bound = conf_interval.iloc[:, 0]
            upper_bound = conf_interval.iloc[:, 1]
            
            forecast_df['lower_bound'] = lower_bound.values
            forecast_df['upper_bound'] = upper_bound.values
        except Exception as e:
            warnings.warn(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {str(e)}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ –¥–∞–Ω–Ω—ã–µ
    return fig, forecast_df


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MAPE
def format_mape(mape_value):
    if pd.isna(mape_value):
        return "–ù/–î"
    if mape_value > 10:  # –ï—Å–ª–∏ MAPE –±–æ–ª—å—à–µ 1000%
        return ">1000%"
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫ %
    return f"{mape_value * 100:.2f}%"


def display_model_metrics(results_dict, model_type_key):
    st.write("### üìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    metrics_to_display = {
        'R¬≤': results_dict.get('r2', '–ù/–î'),
        'MSE': results_dict.get('mse', '–ù/–î'),
        'RMSE': results_dict.get('rmse', '–ù/–î'),
        'MAE': results_dict.get('mae', '–ù/–î'),
        'MAPE': format_mape(results_dict.get('mape', np.nan))
    }
    
    # –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("R¬≤", f"{metrics_to_display['R¬≤']:.4f}" if isinstance(metrics_to_display['R¬≤'], (int, float)) else metrics_to_display['R¬≤'])
        st.metric("MSE", f"{metrics_to_display['MSE']:.4f}" if isinstance(metrics_to_display['MSE'], (int, float)) else metrics_to_display['MSE'])
    with col2:
        st.metric("RMSE", f"{metrics_to_display['RMSE']:.4f}" if isinstance(metrics_to_display['RMSE'], (int, float)) else metrics_to_display['RMSE'])
        st.metric("MAE", f"{metrics_to_display['MAE']:.4f}" if isinstance(metrics_to_display['MAE'], (int, float)) else metrics_to_display['MAE'])
    with col3:
        st.metric("MAPE", metrics_to_display['MAPE'])


def train_model_and_predict(data, test_data, model_type=None, parameters=None, model_title=None):
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -----------
    data : pandas.Series
        –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    test_data : pandas.Series
        –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
    model_type : str –∏–ª–∏ None
        –¢–∏–ø –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–∑ session_state
    parameters : dict –∏–ª–∏ None
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏. –ï—Å–ª–∏ None, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ session_state
    model_title : str –∏–ª–∏ None
        –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    -----------
    tuple –∏–ª–∏ None
        (–º–æ–¥–µ–ª—å, –º–µ—Ç—Ä–∏–∫–∏, –≥—Ä–∞—Ñ–∏–∫) –µ—Å–ª–∏ –æ–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ None
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–æ–¥–µ–ª–∏
    if model_type is None:
        model_type = st.session_state.selected_model_type
    
    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    with st.spinner(f"–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_type}..."):
        model = fit_selected_model(data, model_type)
        
        if not model or not model.is_fitted:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å {model_type}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
            return None
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        st.success(f"–ú–æ–¥–µ–ª—å {model_type} —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
        display_model_information(model)
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥..."):
            if not model_title:
                model_title = f"–ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏ {model_type} –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥"
                
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
            forecast_fig = plot_forecast_plotly(
                model,
                steps=len(test_data),
                train_data=data,
                test_data=test_data,
                title=model_title
            )
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = evaluate_model_performance(model, data, test_data)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            return model, metrics, forecast_fig
    
    return None


def make_future_forecast(model, data, steps, title=None):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -----------
    model : BaseTimeSeriesModel
        –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
    data : pandas.Series
        –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞)
    steps : int
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    title : str –∏–ª–∏ None
        –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    -----------
    tuple –∏–ª–∏ None
        (–≥—Ä–∞—Ñ–∏–∫, –ø—Ä–æ–≥–Ω–æ–∑) –µ—Å–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ None
    """
    if not model or not model.is_fitted:
        st.error("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
        return None
    
    with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã..."):
        if not title:
            model_type = st.session_state.selected_model_type
            title = f"–ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏ {model_type} –Ω–∞ {steps} –ø–µ—Ä–∏–æ–¥–æ–≤ –≤–ø–µ—Ä–µ–¥"
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        future_fig, future_df = get_forecast_with_data(
            model,
            steps=steps,
            original_data=data,
            title=title
        )
        
        return future_fig, future_df


def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–±–µ–∑ –≤—ã–∑–æ–≤–∞ set_page_config, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –≤—ã–∑–≤–∞–Ω —Ä–∞–Ω–µ–µ)
    # setup_page("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ —Å –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AR-–º–æ–¥–µ–ª–µ–π")
    st.title("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ —Å –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏")
    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AR-–º–æ–¥–µ–ª–µ–π")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
    initialize_session_state()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å: –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    st.sidebar.subheader("–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
    model_type = st.sidebar.radio(
        "–¢–∏–ø –º–æ–¥–µ–ª–∏:",
        ["ARMA", "ARIMA", "SARIMA"],
        index=["ARMA", "ARIMA", "SARIMA"].index(st.session_state.selected_model_type)
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –º–æ–¥–µ–ª–∏ –≤ session_state
    st.session_state.selected_model_type = model_type
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    st.markdown(f"# {MODEL_METADATA[model_type]['full_name']} ({MODEL_METADATA[model_type]['name']})")
    
    with st.expander("–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"):
        st.markdown(MODEL_METADATA[model_type]['description'])
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
    time_series = load_time_series()
    
    if time_series is None:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DataFrame
    if isinstance(time_series, pd.DataFrame) and time_series.shape[1] > 0:
        data = time_series.iloc[:, 0]
    else:
        data = time_series
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ session_state
    st.session_state.time_series = data
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
    st.subheader("–ò—Å—Ö–æ–¥–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥")
    fig = plot_time_series(data, title="–ò—Å—Ö–æ–¥–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥")
    st.pyplot(fig)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
    freq = detect_frequency(data)
    st.info(f"""
    **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ä—è–¥–µ:**
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {len(data)}
    - –ü–µ—Ä–∏–æ–¥: —Å {data.index[0].strftime('%d.%m.%Y')} –ø–æ {data.index[-1].strftime('%d.%m.%Y')}
    - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {freq or "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"}
    """)
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
    st.sidebar.subheader("–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    train_size = st.sidebar.slider("–î–æ–ª—è –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏", 0.5, 0.95, 0.8, 0.05)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    n = len(data)
    train_idx = int(n * train_size)
    train_data = data.iloc[:train_idx]
    test_data = data.iloc[train_idx:]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤ session_state
    st.session_state.train_data = train_data
    st.session_state.test_data = test_data
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
    st.subheader("–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏")
    split_fig = plot_train_test_split(train_data, test_data)
    st.pyplot(split_fig)
    
    # –°–µ–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏
    st.subheader("–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏")
    stationarity_results = check_stationarity(train_data)
    display_stationarity_results(stationarity_results)
    
    # –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–µ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã—Ö —Ä—è–¥–æ–≤
    st.subheader("–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
    if model_type == "ARMA":
        st.info("–ú–æ–¥–µ–ª—å ARMA –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        differenced_data = train_data
    else:
        col1, col2 = st.columns(2)
        
        with col1:
            d = st.number_input("–ü–æ—Ä—è–¥–æ–∫ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è (d)", 
                               min_value=0, max_value=2, 
                               value=1 if not stationarity_results['is_stationary'] else 0,
                               step=1)
        
        # –î–ª—è SARIMA –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–∑–æ–Ω–Ω–æ–≥–æ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è
        if model_type == "SARIMA":
            with col2:
                D = st.number_input("–ü–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–Ω–æ–≥–æ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è (D)", 
                                   min_value=0, max_value=1, 
                                   value=0, step=1)
            
            s = st.number_input("–°–µ–∑–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (s)", 
                               min_value=1, max_value=52, 
                               value=12 if freq in ['M', 'ME'] else 
                                    4 if freq in ['Q', 'QE'] else 
                                    7 if freq in ['W', 'WE'] else 
                                    24 if freq in ['H'] else 12,
                               step=1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã SARIMA –≤ session_state
            st.session_state.sarima_params['d'] = d
            st.session_state.sarima_params['D'] = D
            st.session_state.sarima_params['s'] = s
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ
            if d > 0 or D > 0:
                differenced_data = apply_differencing(train_data, d, D, s)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è
                diff_order = f"{'–ø–µ—Ä–≤–æ–≥–æ' if d == 1 else '–≤—Ç–æ—Ä–æ–≥–æ' if d == 2 else ''} –ø–æ—Ä—è–¥–∫–∞"
                if D > 0:
                    diff_order += f" –∏ —Å–µ–∑–æ–Ω–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ {D}"
                
                diff_fig = display_differencing_effect(train_data, differenced_data, diff_order)
                st.pyplot(diff_fig)
            else:
                differenced_data = train_data
                st.info("–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª–æ—Å—å.")
        
        else:  # ARIMA
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä d –≤ session_state
            st.session_state.arima_params['d'] = d
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ
            if d > 0:
                differenced_data = apply_differencing(train_data, d)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è
                diff_order = f"{'–ø–µ—Ä–≤–æ–≥–æ' if d == 1 else '–≤—Ç–æ—Ä–æ–≥–æ' if d == 2 else ''} –ø–æ—Ä—è–¥–∫–∞"
                diff_fig = display_differencing_effect(train_data, differenced_data, diff_order)
                st.pyplot(diff_fig)
            else:
                differenced_data = train_data
                st.info("–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª–æ—Å—å.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è
    if model_type != "ARMA" and (d > 0 or (model_type == "SARIMA" and D > 0)):
        st.subheader("–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è")
        diff_stationarity = check_stationarity(differenced_data.dropna())
        display_stationarity_results(diff_stationarity)
    
    # –ê–Ω–∞–ª–∏–∑ ACF –∏ PACF
    st.subheader("–ê–Ω–∞–ª–∏–∑ ACF –∏ PACF")
    acf_pacf_fig = plot_acf_pacf_plotly(differenced_data)
    st.plotly_chart(acf_pacf_fig, use_container_width=True)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    seasonal = model_type == "SARIMA"
    seasonal_period = s if seasonal and 's' in locals() else None
    suggested_params = suggest_arima_params(differenced_data, seasonal, seasonal_period)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏ - –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")
    
    param_tabs = st.tabs(["–†—É—á–Ω–æ–π –ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"])
    
    with param_tabs[0]:  # –†—É—á–Ω–æ–π –ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
        if model_type == "ARMA":
            col1, col2 = st.columns(2)
            
            with col1:
                p = st.number_input("–ü–æ—Ä—è–¥–æ–∫ AR (p)", min_value=0, max_value=5, 
                                   value=suggested_params['p'], step=1)
            
            with col2:
                q = st.number_input("–ü–æ—Ä—è–¥–æ–∫ MA (q)", min_value=0, max_value=5, 
                                   value=suggested_params['q'], step=1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ session_state
            st.session_state.arma_params['p'] = p
            st.session_state.arma_params['q'] = q
            
        elif model_type == "ARIMA":
            col1, col2 = st.columns(2)
            
            with col1:
                p = st.number_input("–ü–æ—Ä—è–¥–æ–∫ AR (p)", min_value=0, max_value=5, 
                                   value=suggested_params['p'], step=1)
            
            with col2:
                q = st.number_input("–ü–æ—Ä—è–¥–æ–∫ MA (q)", min_value=0, max_value=5, 
                                   value=suggested_params['q'], step=1)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä d, –Ω–æ –Ω–µ –¥–∞–µ–º –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å –∑–¥–µ—Å—å
            st.info(f"–ü–æ—Ä—è–¥–æ–∫ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è (d): {d}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ session_state
            st.session_state.arima_params['p'] = p
            st.session_state.arima_params['q'] = q
            
        elif model_type == "SARIMA":
            st.markdown("### –ù–µ—Å–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
            col1, col2 = st.columns(2)
            
            with col1:
                p = st.number_input("–ü–æ—Ä—è–¥–æ–∫ AR (p)", min_value=0, max_value=5, 
                                   value=suggested_params['p'], step=1)
            
            with col2:
                q = st.number_input("–ü–æ—Ä—è–¥–æ–∫ MA (q)", min_value=0, max_value=5, 
                                   value=suggested_params['q'], step=1)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä d, –Ω–æ –Ω–µ –¥–∞–µ–º –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å –∑–¥–µ—Å—å
            st.info(f"–ü–æ—Ä—è–¥–æ–∫ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è (d): {d}")
            
            st.markdown("### –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
            col1, col2 = st.columns(2)
            
            with col1:
                P = st.number_input("–°–µ–∑–æ–Ω–Ω—ã–π AR (P)", min_value=0, max_value=2, 
                                   value=suggested_params['P'], step=1)
            
            with col2:
                Q = st.number_input("–°–µ–∑–æ–Ω–Ω—ã–π MA (Q)", min_value=0, max_value=2, 
                                   value=suggested_params['Q'], step=1)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã D –∏ s, –Ω–æ –Ω–µ –¥–∞–µ–º –∏—Ö –∏–∑–º–µ–Ω–∏—Ç—å –∑–¥–µ—Å—å
            st.info(f"–°–µ–∑–æ–Ω–Ω–æ–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ (D): {D}")
            st.info(f"–°–µ–∑–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (s): {s}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ session_state
            st.session_state.sarima_params['p'] = p
            st.session_state.sarima_params['q'] = q
            st.session_state.sarima_params['P'] = P
            st.session_state.sarima_params['Q'] = Q
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
        if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", key="apply_manual_params"):
            result = train_model_and_predict(
                train_data, 
                test_data, 
                model_title=f"–ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏ {model_type} —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥"
            )
            
            if result:
                model, metrics, forecast_fig = result
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
                st.plotly_chart(forecast_fig, use_container_width=True)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                display_model_metrics(metrics, model_type)
                
                # –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
                st.subheader("–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤")
                display_residuals_analysis(model)

    with param_tabs[1]:  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        st.markdown("### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        st.write("""
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ 
        –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –º–æ–¥–µ–ª—å —Å –Ω–∞–∏–ª—É—á—à–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏–µ–º.
        """)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è auto_arima
        auto_col1, auto_col2 = st.columns(2)
        
        with auto_col1:
            information_criterion = st.selectbox(
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π", 
                ["aic", "bic", "aicc", "oob"],
                index=0,
                help="–ö—Ä–∏—Ç–µ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)"
            )
        
        with auto_col2:
            n_jobs = st.slider(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", 
                min_value=1, 
                max_value=8, 
                value=1,
                help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —è–¥–µ—Ä —É—Å–∫–æ—Ä—è–µ—Ç –ø–æ–¥–±–æ—Ä, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –ø–∞–º—è—Ç–∏"
            )
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        st.subheader("–î–∏–∞–ø–∞–∑–æ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞")
        
        param_cols = st.columns(3)
        
        with param_cols[0]:
            max_p = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ p", 0, 5, 2)
            if model_type != "ARMA":
                max_d = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ d", 0, 2, d)
            max_q = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ q", 0, 5, 2)
        
        if model_type == "SARIMA":
            with param_cols[1]:
                max_P = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ P", 0, 2, 1)
                max_D = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ D", 0, 1, D)
                max_Q = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ Q", 0, 2, 1)
            
            with param_cols[2]:
                auto_detect_s = st.checkbox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏", value=True)
                
                if not auto_detect_s:
                    seasonal_m = st.number_input(
                        "–°–µ–∑–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ m", 
                        min_value=1,
                        max_value=52,
                        value=s,
                        help="–ü–µ—Ä–∏–æ–¥ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12 –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)"
                    )
                else:
                    with st.spinner("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏..."):
                        detected_s = auto_detect_seasonality(train_data)
                        seasonal_m = st.number_input(
                            "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏", 
                            min_value=1,
                            max_value=52,
                            value=detected_s,
                            help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)"
                        )
                        st.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏: {detected_s}")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä"):
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–¥–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤..."):
                try:
                    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è auto_arima
                    auto_params = {
                        "information_criterion": information_criterion,
                        "n_jobs": n_jobs,
                        "return_all_models": True,
                        "max_p": max_p,
                        "max_q": max_q
                    }
                    
                    if model_type != "ARMA":
                        auto_params["max_d"] = max_d
                    
                    if model_type == "SARIMA":
                        auto_params["seasonal"] = True
                        auto_params["max_P"] = max_P
                        auto_params["max_D"] = max_D
                        auto_params["max_Q"] = max_Q
                        auto_params["m"] = seasonal_m
                    else:
                        auto_params["seasonal"] = False
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º auto_arima
                    auto_result = auto_arima(train_data, **auto_params)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    st.success("–ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                    
                    if model_type == "SARIMA":
                        st.markdown(f"""
                        ### –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: SARIMA{auto_result['order']}{auto_result['seasonal_order']}
                        - AIC: {auto_result['aic']:.2f}
                        - BIC: {auto_result['bic']:.2f}
                        """)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –≤ session_state
                        p, d, q = auto_result['order']
                        P, D, Q, m = auto_result['seasonal_order']
                        
                        st.session_state.sarima_params = {
                            'p': p, 'd': d, 'q': q,
                            'P': P, 'D': D, 'Q': Q, 's': m
                        }
                    elif model_type == "ARIMA":
                        st.markdown(f"""
                        ### –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: ARIMA{auto_result['order']}
                        - AIC: {auto_result['aic']:.2f}
                        - BIC: {auto_result['bic']:.2f}
                        """)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –≤ session_state
                        p, d, q = auto_result['order']
                        st.session_state.arima_params = {'p': p, 'd': d, 'q': q}
                    else:  # ARMA
                        st.markdown(f"""
                        ### –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: ARMA({auto_result['order'][0]}, {auto_result['order'][2]})
                        - AIC: {auto_result['aic']:.2f}
                        - BIC: {auto_result['bic']:.2f}
                        """)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –≤ session_state
                        p, _, q = auto_result['order']
                        st.session_state.arma_params = {'p': p, 'q': q}
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
                    best_model = auto_result['best_model']
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –∫–∞–∫ —Ç–µ–∫—É—â—É—é
                    set_current_model(best_model)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –∫–∞–∫ —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
                    st.session_state.current_active_model = best_model
                    st.session_state.last_trained_on = 'train'
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if model_type == "ARMA":
                        p, _, q = auto_result['order']
                        st.session_state.model_params = {'p': p, 'q': q}
                    elif model_type == "ARIMA":
                        p, d, q = auto_result['order']
                        st.session_state.model_params = {'p': p, 'd': d, 'q': q}
                    elif model_type == "SARIMA":
                        p, d, q = auto_result['order']
                        P, D, Q, m = auto_result['seasonal_order']
                        st.session_state.model_params = {
                            'p': p, 'd': d, 'q': q,
                            'P': P, 'D': D, 'Q': Q, 's': m
                        }
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
                    forecast_fig = plot_forecast_plotly(
                        best_model, 
                        steps=len(test_data),
                        train_data=train_data,
                        test_data=test_data,
                        title="–ü—Ä–æ–≥–Ω–æ–∑ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–µ—Ä–∏–æ–¥–µ"
                    )
                    
                    st.plotly_chart(forecast_fig, use_container_width=True)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    metrics = evaluate_model_performance(best_model, train_data, test_data)
                    
                    display_model_metrics(metrics, model_type)
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–¥–±–æ—Ä–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {str(e)}")
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
    st.subheader("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    train_forecast_tabs = st.tabs(["–û—Ü–µ–Ω–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ", "–ü—Ä–æ–≥–Ω–æ–∑ –≤ –±—É–¥—É—â–µ–µ"])
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ run_future_forecast –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    # –∏ –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –º–µ–Ω—è–µ—Ç —Ç–∏–ø
    tab_key = f"tab_{model_type}"
    if 'last_tab' not in st.session_state or st.session_state.last_tab != tab_key:
        st.session_state.run_future_forecast = False
        st.session_state.last_tab = tab_key
    
    with train_forecast_tabs[0]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
        if st.session_state.get('current_active_model'):
            st.success(f"–ú–æ–¥–µ–ª—å {model_type} —É–∂–µ –æ–±—É—á–µ–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {display_model_information(st.session_state.current_active_model)}")
        
        st.write("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –∏ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ.")
        
        if st.button("–û–±—É—á–∏—Ç—å –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å", key="train_and_test"):
            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ
            if st.session_state.get('current_active_model'):
                # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –º–æ–¥–µ–ª–∏
                current_model = st.session_state.current_active_model
                if hasattr(current_model, 'model_name'):
                    model_type_from_obj = current_model.model_name
                else:
                    model_type_from_obj = current_model.get_params().get('type')
                    
                if model_type_from_obj == model_type:
                    model = current_model
                    st.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞–Ω–µ–µ –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å {model_type}")
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∏ –º–µ—Ç—Ä–∏–∫–∏
                    forecast_fig = plot_forecast_plotly(
                        model, 
                        steps=len(test_data),
                        train_data=train_data,
                        test_data=test_data,
                        title=f"–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ {model_type} –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ"
                    )
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
                    st.plotly_chart(forecast_fig, use_container_width=True)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    metrics = evaluate_model_performance(model, train_data, test_data)
                    display_model_metrics(metrics, model_type)
                    
                    # –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
                    st.subheader("–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤")
                    display_residuals_analysis(model)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
                    st.session_state.last_trained_on = 'train'
                else:
                    result = train_model_and_predict(
                        train_data, 
                        test_data, 
                        model_title=f"–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ {model_type} –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ"
                    )
                    
                    if result:
                        model, metrics, forecast_fig = result
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –∫–∞–∫ —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é
                        st.session_state.current_active_model = model
                        st.session_state.last_trained_on = 'train'
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
                        st.plotly_chart(forecast_fig, use_container_width=True)
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                        display_model_metrics(metrics, model_type)
                        
                        # –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
                        st.subheader("–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤")
                        display_residuals_analysis(model)
            else:
                result = train_model_and_predict(
                    train_data, 
                    test_data, 
                    model_title=f"–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ {model_type} –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ"
                )
                
                if result:
                    model, metrics, forecast_fig = result
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –∫–∞–∫ —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é
                    st.session_state.current_active_model = model
                    st.session_state.last_trained_on = 'train'
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
                    st.plotly_chart(forecast_fig, use_container_width=True)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    display_model_metrics(metrics, model_type)
                    
                    # –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
                    st.subheader("–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤")
                    display_residuals_analysis(model)
    
    with train_forecast_tabs[1]:
        st.write("–≠—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö.")
        st.info("–î–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –±—É–¥—É—â–µ–µ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ –Ω–∞ –≤—Å–µ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É.")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
        current_model = st.session_state.get('current_active_model')
        
        if current_model and current_model.is_fitted:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–ø —á–µ—Ä–µ–∑ –∞—Ç—Ä–∏–±—É—Ç model_name, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if hasattr(current_model, 'model_name'):
                model_type_from_obj = current_model.model_name
            else:
                # –ï—Å–ª–∏ –∞—Ç—Ä–∏–±—É—Ç–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º get_params()
                model_type_from_obj = current_model.get_params().get('type')
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
            st.success(f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {model_type_from_obj} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {display_model_information(current_model)}")
            
            if model_type_from_obj != model_type:
                st.warning(f"–¢–µ–∫—É—â–∞—è –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å ({model_type_from_obj}) –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ ({model_type}). –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å {model_type}.")
            else:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—É–º–Ω–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                max_steps = min(int(len(data) * 0.5), 100)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º session_state –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞
                if 'future_steps' not in st.session_state:
                    st.session_state.future_steps = min(12, max_steps)
                
                future_steps = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", 1, max_steps, st.session_state.future_steps, key='future_steps_slider')
                st.session_state.future_steps = future_steps
                
                if st.button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –≤ –±—É–¥—É—â–µ–µ", key='future_forecast_button'):
                    st.session_state.run_future_forecast = True
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    st.rerun()
                
                if st.session_state.get('run_future_forecast', False):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    need_retrain = True
                    if st.session_state.last_trained_on == 'full':
                        need_retrain = False
                    
                    if need_retrain:
                        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
                        with st.spinner("–ü–µ—Ä–µ–æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –ø–æ–ª–Ω–æ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö..."):
                            full_model = fit_selected_model(data)
                            
                            if full_model:
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –∏ –µ–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                                st.session_state.current_active_model = full_model
                                st.session_state.last_trained_on = 'full'
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –≤ session_state –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                if model_type == "ARMA":
                                    st.session_state.model_params = {'p': full_model.p, 'q': full_model.q}
                                elif model_type == "ARIMA":
                                    st.session_state.model_params = {'p': full_model.p, 'd': full_model.d, 'q': full_model.q}
                                elif model_type == "SARIMA":
                                    st.session_state.model_params = {
                                        'p': full_model.p, 'd': full_model.d, 'q': full_model.q,
                                        'P': full_model.P, 'D': full_model.D, 'Q': full_model.Q, 's': full_model.m
                                    }
                                
                                st.success(f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ –Ω–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {display_model_information(full_model)}")
                            else:
                                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
                                st.stop()
                    else:
                        full_model = current_model
                        st.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞–Ω–µ–µ –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
                        if hasattr(st.session_state, 'model_params'):
                            params_str = ", ".join([f"{k}={v}" for k, v in st.session_state.model_params.items()])
                            st.write(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏: {params_str}")
                    
                    if full_model and full_model.is_fitted:
                        try:
                            future_result = make_future_forecast(
                                full_model, 
                                data, 
                                future_steps,
                                title=f"–ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏ {model_type} –Ω–∞ {future_steps} –ø–µ—Ä–∏–æ–¥–æ–≤ –≤–ø–µ—Ä–µ–¥"
                            )
                            
                            if future_result:
                                future_fig, future_df = future_result
                                
                                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ future_fig —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º Figure
                                if hasattr(future_fig, 'update_layout'):
                                    st.plotly_chart(future_fig, use_container_width=True)
                                else:
                                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ DataFrame.")
                                
                                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
                                st.dataframe(future_df)
                                
                                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
                                csv = future_df.to_csv()
                                st.download_button(
                                    label="–°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∫–∞–∫ CSV",
                                    data=csv,
                                    file_name=f'{model_type}_forecast_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv',
                                    mime='text/csv',
                                )
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ session_state
                                st.session_state.forecast_results = future_df
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
                                if st.button("–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", key="reset_forecast"):
                                    st.session_state.run_future_forecast = False
                                    st.rerun()
                                
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}")
                            st.exception(e)
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –ø–æ–ª–Ω–æ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–û—Ü–µ–Ω–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ'.")


if __name__ == "__main__":
    main() 