"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ (ARMA, ARIMA, SARIMA).
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤, –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–µ–π, –æ–±—É—á–µ–Ω–∏—è –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

import streamlit as st
import pandas as pd
import numpy as np
import sys
import os
import matplotlib.pyplot as plt
from datetime import datetime
import warnings
import plotly.graph_objects as go
import time
import logging

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ (–¥–æ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –≤—ã–∑–æ–≤–æ–≤ st)
st.set_page_config(page_title="–ê–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏", page_icon="üìà", layout="wide")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å Python
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
from modules.autoregressive.core import (
    check_stationarity, apply_differencing, detect_frequency,
    suggest_arima_params
)
from modules.autoregressive.models import (
    ARMAModel, ARIMAModel, SARIMAModel
)
from modules.autoregressive.visualization import (
    plot_time_series, plot_train_test_split, plot_acf_pacf_plotly,
    plot_forecast, plot_forecast_plotly, plot_forecast_matplotlib, 
    display_model_information, display_differencing_effect,
    auto_detect_seasonality
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –∏ –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–µ–π
from modules.autoregressive.model_selection import (
    check_stationarity as check_stationarity_advanced,
    estimate_differencing_order, detect_seasonality,
    auto_arima, evaluate_model_performance, split_train_test,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç split_train_test
    plot_model_results, generate_model_report
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from modules.page_template import (
    load_time_series,
    run_calculations_on_button_click,
)
import modules.reporting as reporting
from modules.utils import nothing_selected

# –ò–º–ø–æ—Ä—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
from modules.visualization.unified_plots import (
    create_unified_forecast_plot_plotly,
    create_unified_forecast_plot_matplotlib,
    create_simple_time_series_plot
)

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    stream=sys.stdout  # Log to stdout so it appears in terminal
)
logger = logging.getLogger('arima_app')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ - –¥–æ–±–∞–≤–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é ar_model –∏ ar_results
if 'ar_model' not in st.session_state:
    st.session_state.ar_model = None
if 'ar_results' not in st.session_state:
    st.session_state.ar_results = None
if 'run_future_forecast' not in st.session_state:
    st.session_state.run_future_forecast = False
if 'future_steps' not in st.session_state:
    st.session_state.future_steps = 12
if 'forecast_results' not in st.session_state:
    st.session_state.forecast_results = None
if 'current_active_model' not in st.session_state:
    st.session_state.current_active_model = None
if 'last_trained_on' not in st.session_state:
    st.session_state.last_trained_on = None
if 'auto_tuning_experiments' not in st.session_state:
    st.session_state.auto_tuning_experiments = []

def initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏."""
    # –ú–æ–¥–µ–ª—å
    if 'selected_model_type' not in st.session_state:
        st.session_state.selected_model_type = "ARIMA"
    
    # –î–∞–Ω–Ω—ã–µ
    if 'time_series' not in st.session_state:
        st.session_state.time_series = None
    
    if 'train_data' not in st.session_state:
        st.session_state.train_data = None
    
    if 'test_data' not in st.session_state:
        st.session_state.test_data = None
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–µ–π
    if 'arma_params' not in st.session_state:
        st.session_state.arma_params = {'p': 1, 'q': 1}
    
    if 'arima_params' not in st.session_state:
        st.session_state.arima_params = {'p': 1, 'd': 1, 'q': 1}
    
    if 'sarima_params' not in st.session_state:
        st.session_state.sarima_params = {'p': 1, 'd': 1, 'q': 1, 'P': 0, 'D': 0, 'Q': 0, 's': 12}
    
    # –û–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    if 'current_arma_model' not in st.session_state:
        st.session_state.current_arma_model = None
    
    if 'current_arima_model' not in st.session_state:
        st.session_state.current_arima_model = None
    
    if 'current_sarima_model' not in st.session_state:
        st.session_state.current_sarima_model = None


def get_current_model():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ session_state."""
    model_type = st.session_state.selected_model_type
    
    if model_type == "ARMA":
        return st.session_state.current_arma_model
    elif model_type == "ARIMA":
        return st.session_state.current_arima_model
    elif model_type == "SARIMA":
        return st.session_state.current_sarima_model
    else:
        return None


def set_current_model(model):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –≤ session_state."""
    model_type = st.session_state.selected_model_type
    
    if model_type == "ARMA":
        st.session_state.current_arma_model = model
    elif model_type == "ARIMA":
        st.session_state.current_arima_model = model
    elif model_type == "SARIMA":
        st.session_state.current_sarima_model = model


def fit_selected_model(data, model_type=None):
    """
    –û–±—É—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã—Ö.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -----------
    data : pandas.Series
        –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    model_type : str –∏–ª–∏ None
        –¢–∏–ø –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–∑ session_state.
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    -----------
    object
        –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
    """
    if model_type is None:
        model_type = st.session_state.selected_model_type
    
    try:
        if model_type == "ARMA":
            params = st.session_state.arma_params
            model = ARMAModel(p=params['p'], q=params['q'])
        elif model_type == "ARIMA":
            params = st.session_state.arima_params
            model = ARIMAModel(p=params['p'], d=params['d'], q=params['q'])
        elif model_type == "SARIMA":
            params = st.session_state.sarima_params
            model = SARIMAModel(
                p=params['p'], d=params['d'], q=params['q'],
                P=params['P'], D=params['D'], Q=params['Q'], m=params['s']
            )
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–æ–¥–µ–ª–∏: {model_type}")
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –ø–æ–¥–≥–æ–Ω–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
            model.fit(data)
        except Exception as e:
            if "LU decomposition error" in str(e) or "SVD did not converge" in str(e):
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ 1: —Å –¥—Ä—É–≥–∏–º —Å–æ–ª–≤–µ—Ä–æ–º
                st.warning("–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥–≥–æ–Ω–∫–∏ –º–æ–¥–µ–ª–∏ (LBFGS)...")
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å —Å —Ç–µ–º –∂–µ —Ç–∏–ø–æ–º
                if model_type == "ARMA":
                    new_model = ARMAModel(p=params['p'], q=params['q'])
                elif model_type == "ARIMA":
                    new_model = ARIMAModel(p=params['p'], d=params['d'], q=params['q'])
                elif model_type == "SARIMA":
                    new_model = SARIMAModel(
                        p=params['p'], d=params['d'], q=params['q'],
                        P=params['P'], D=params['D'], Q=params['Q'], m=params['s']
                    )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–ª–≤–µ—Ä–∞
                if hasattr(new_model, 'fit_options'):
                    new_model.fit_options = {'method': 'lbfgs', 'maxiter': 50}
                
                try:
                    new_model.fit(data)
                    model = new_model
                except Exception as e2:
                    # –ï—Å–ª–∏ –∏ –≤—Ç–æ—Ä–æ–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—Å—Ç–∏—Ç—å –º–æ–¥–µ–ª—å
                    st.warning("–ü–æ–ø—ã—Ç–∫–∞ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –º–æ–¥–µ–ª—å (—Å–Ω–∏–∑–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)...")
                    
                    # –£–ø—Ä–æ—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    if model_type == "ARMA":
                        simple_model = ARMAModel(p=max(1, params['p']-1), q=max(1, params['q']-1))
                    elif model_type == "ARIMA":
                        simple_model = ARIMAModel(p=max(1, params['p']-1), d=params['d'], q=max(1, params['q']-1))
                    elif model_type == "SARIMA":
                        simple_model = SARIMAModel(
                            p=max(1, params['p']-1), d=params['d'], q=max(1, params['q']-1),
                            P=max(0, params['P']-1), D=params['D'], Q=max(0, params['Q']-1), m=params['s']
                        )
                    
                    try:
                        simple_model.fit(data)
                        model = simple_model
                        st.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–º –ø–æ—Ä—è–¥–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
                    except Exception as e3:
                        # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤—ã–∑—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏. –û—à–∏–±–∫–∞: {str(e3)}")
            else:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–µ–π, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
                raise e
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ session_state
        set_current_model(model)
        
        return model
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {model_type}: {str(e)}")
        return None


def get_forecast_with_data(model, steps, original_data, title):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∫ –≥—Ä–∞—Ñ–∏–∫, —Ç–∞–∫ –∏ DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -----------
    model : BaseTimeSeriesModel
        –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
    steps : int
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    original_data : pd.Series
        –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    title : str
        –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    -----------
    Tuple[go.Figure, pd.DataFrame]
        –ö–æ—Ä—Ç–µ–∂ (–≥—Ä–∞—Ñ–∏–∫ Plotly, DataFrame —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º)
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    forecast = model.predict(steps=steps)
    
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig = plot_forecast_plotly(model, steps=steps, original_data=original_data, title=title)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    forecast_df = pd.DataFrame({'forecast': forecast.values}, index=forecast.index)
    
    # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if hasattr(model.fitted_model, 'get_forecast'):
        try:
            forecast_obj = model.fitted_model.get_forecast(steps=steps)
            conf_interval = forecast_obj.conf_int(alpha=0.05)  # 95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            
            lower_bound = conf_interval.iloc[:, 0]
            upper_bound = conf_interval.iloc[:, 1]
            
            forecast_df['lower_bound'] = lower_bound.values
            forecast_df['upper_bound'] = upper_bound.values
        except Exception as e:
            warnings.warn(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {str(e)}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ –¥–∞–Ω–Ω—ã–µ
    return fig, forecast_df


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MAPE
def format_mape(mape_value):
    if pd.isna(mape_value):
        return "–ù/–î"
    if mape_value > 10:  # –ï—Å–ª–∏ MAPE –±–æ–ª—å—à–µ 1000%
        return ">1000%"
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫ %
    return f"{mape_value * 100:.2f}%"


def display_model_metrics(results_dict, model_type_key):
    st.write("### üìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    metrics_to_display = {
        'R¬≤': results_dict.get('r2', '–ù/–î'),
        'Adjusted R¬≤': results_dict.get('adj_r2', '–ù/–î'),
        'MSE': results_dict.get('mse', '–ù/–î'),
        'RMSE': results_dict.get('rmse', '–ù/–î'),
        'MAE': results_dict.get('mae', '–ù/–î'),
        'MAPE': format_mape(results_dict.get('mape', np.nan)),
        'MASE': results_dict.get('mase', '–ù/–î')
    }
    
    # –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("R¬≤", f"{metrics_to_display['R¬≤']:.4f}" if isinstance(metrics_to_display['R¬≤'], (int, float)) else metrics_to_display['R¬≤'])
        st.metric("Adjusted R¬≤", f"{metrics_to_display['Adjusted R¬≤']:.4f}" if isinstance(metrics_to_display['Adjusted R¬≤'], (int, float)) else metrics_to_display['Adjusted R¬≤'])
        st.metric("MSE", f"{metrics_to_display['MSE']:.4f}" if isinstance(metrics_to_display['MSE'], (int, float)) else metrics_to_display['MSE'])
    with col2:
        st.metric("RMSE", f"{metrics_to_display['RMSE']:.4f}" if isinstance(metrics_to_display['RMSE'], (int, float)) else metrics_to_display['RMSE'])
        st.metric("MAE", f"{metrics_to_display['MAE']:.4f}" if isinstance(metrics_to_display['MAE'], (int, float)) else metrics_to_display['MAE'])
    with col3:
        st.metric("MAPE", metrics_to_display['MAPE'])
        st.metric("MASE", f"{metrics_to_display['MASE']:.4f}" if isinstance(metrics_to_display['MASE'], (int, float)) else metrics_to_display['MASE'])


def train_model_and_predict(data, test_data, model_type=None, parameters=None, model_title=None):
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -----------
    data : pandas.Series
        –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    test_data : pandas.Series
        –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
    model_type : str –∏–ª–∏ None
        –¢–∏–ø –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–∑ session_state
    parameters : dict –∏–ª–∏ None
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏. –ï—Å–ª–∏ None, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ session_state
    model_title : str –∏–ª–∏ None
        –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    -----------
    tuple –∏–ª–∏ None
        (–º–æ–¥–µ–ª—å, –º–µ—Ç—Ä–∏–∫–∏, –≥—Ä–∞—Ñ–∏–∫) –µ—Å–ª–∏ –æ–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ None
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–æ–¥–µ–ª–∏
    if model_type is None:
        model_type = st.session_state.selected_model_type
    
    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    with st.spinner(f"–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_type}..."):
        model = fit_selected_model(data, model_type)
        
        if not model or not model.is_fitted:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å {model_type}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
            return None
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        st.success(f"–ú–æ–¥–µ–ª—å {model_type} —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
        display_model_information(model)
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥..."):
            if not model_title:
                model_title = f"–ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏ {model_type} –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥"
                
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
            forecast_fig = plot_forecast_plotly(
                model,
                steps=len(test_data),
                train_data=data,
                test_data=test_data,
                title=model_title
            )
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = evaluate_model_performance(model, data, test_data)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            return model, metrics, forecast_fig
    
    return None


def make_future_forecast(model, data, steps, title=None):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -----------
    model : BaseTimeSeriesModel
        –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
    data : pandas.Series
        –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞)
    steps : int
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    title : str –∏–ª–∏ None
        –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    -----------
    tuple –∏–ª–∏ None
        (–≥—Ä–∞—Ñ–∏–∫, –ø—Ä–æ–≥–Ω–æ–∑) –µ—Å–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ None
    """
    if not model or not model.is_fitted:
        st.error("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
        return None
    
    with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã..."):
        if not title:
            model_type = st.session_state.selected_model_type
            title = f"–ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏ {model_type} –Ω–∞ {steps} –ø–µ—Ä–∏–æ–¥–æ–≤ –≤–ø–µ—Ä–µ–¥"
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        future_fig, future_df = get_forecast_with_data(
            model,
            steps=steps,
            original_data=data,
            title=title
        )
        
        return future_fig, future_df


def display_auto_tuning_experiments():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
    experiments_count = len(st.session_state.auto_tuning_experiments) if st.session_state.auto_tuning_experiments else 0
    logger.info(f"Display function called - auto_tuning_experiments count: {experiments_count}")
    
    if not st.session_state.auto_tuning_experiments or len(st.session_state.auto_tuning_experiments) == 0:
        # Debug information when experiments are not available
        experiments_exists = 'auto_tuning_experiments' in st.session_state
        experiments_length = len(st.session_state.auto_tuning_experiments) if experiments_exists else 0
        
        logger.info(f"No experiments to display: exists={experiments_exists}, length={experiments_length}")
        
        if experiments_length == 0 and experiments_exists:
            st.warning("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥–±–æ—Ä –∑–∞–Ω–æ–≤–æ.")
        else:
            st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        
        if st.button("üîç –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ session_state (–æ—Ç–ª–∞–¥–∫–∞)"):
            debug_info = {
                "auto_tuning_experiments_exists": experiments_exists,
                "auto_tuning_experiments_length": experiments_length,
                "ar_results_exists": 'ar_results' in st.session_state,
                "ar_model_exists": 'ar_model' in st.session_state,
                "session_state_keys": list(st.session_state.keys())
            }
            st.json(debug_info)
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if experiments_length > 0:
                st.markdown("**–ü–µ—Ä–≤—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç (–ø—Ä–∏–º–µ—Ä):**")
                first_exp = st.session_state.auto_tuning_experiments[0]
                st.json({
                    "model_info": first_exp.get('model_info', 'N/A'),
                    "params": first_exp.get('params', {}),
                    "has_train_metrics": 'train_metrics' in first_exp,
                    "has_test_metrics": 'test_metrics' in first_exp,
                    "rank": first_exp.get('rank', 'N/A')
                })
        return
    
    logger.info("Displaying auto-tuning experiments section")
    st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(st.session_state.auto_tuning_experiments)} –º–æ–¥–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    # Get criterion info from session_state
    try:
        criterion_info = st.session_state.get('last_info_criterion', 'AIC').upper()
    except:
        criterion_info = "AIC"  # Default fallback
    
    st.info(f"–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∫—Ä–∏—Ç–µ—Ä–∏–∏ {criterion_info}. –ú–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å.")
    st.info(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(st.session_state.auto_tuning_experiments)}")
    
    # Create a DataFrame for comparison with enhanced metrics
    models_data = []
    for exp in st.session_state.auto_tuning_experiments:
        # Extract metrics for readability
        train_metrics = exp['train_metrics']
        test_metrics = exp['test_metrics']
        
        # Use total_time if available, otherwise fall back to train_time
        display_time = exp.get('total_time', exp.get('train_time', 0))
        
        model_data = {
            '–ú–æ–¥–µ–ª—å': exp['model_info'],
            '–†–∞–Ω–≥': exp['rank'],
            f'{criterion_info}': exp.get('info_criterion', '–ù/–î'),
            
            # Training metrics
            'R¬≤ (–æ–±—É—á)': train_metrics.get('r2', '–ù/–î'),
            'Adjusted R¬≤': train_metrics.get('adj_r2', '–ù/–î'),
            'MSE': train_metrics.get('mse', '–ù/–î'),
            'RMSE': train_metrics.get('rmse', '–ù/–î'),
            'MAE': train_metrics.get('mae', '–ù/–î'),
            'MAPE': train_metrics.get('mape', '–ù/–î'),
            'SMAPE': train_metrics.get('smape', '–ù/–î'),
            'MASE': train_metrics.get('mase', '–ù/–î'),
            'Theil U2': train_metrics.get('theil_u2', '–ù/–î'),
            
            # Test metrics
            'R¬≤ (—Ç–µ—Å—Ç)': test_metrics.get('r2', '–ù/–î'),
            'Adjusted R¬≤ (—Ç–µ—Å—Ç)': test_metrics.get('adj_r2', '–ù/–î'),
            'MSE (—Ç–µ—Å—Ç)': test_metrics.get('mse', '–ù/–î'),
            'RMSE (—Ç–µ—Å—Ç)': test_metrics.get('rmse', '–ù/–î'),
            'MAE (—Ç–µ—Å—Ç)': test_metrics.get('mae', '–ù/–î'),
            'MAPE (—Ç–µ—Å—Ç)': test_metrics.get('mape', '–ù/–î'),
            'SMAPE (—Ç–µ—Å—Ç)': test_metrics.get('smape', '–ù/–î'),
            'MASE (—Ç–µ—Å—Ç)': test_metrics.get('mase', '–ù/–î'),
            'Theil U2 (—Ç–µ—Å—Ç)': test_metrics.get('theil_u2', '–ù/–î'),
            
            '–í—Ä–µ–º—è (—Å–µ–∫)': display_time
        }
        models_data.append(model_data)
        logger.info(f"Added model to comparison table: {model_data['–ú–æ–¥–µ–ª—å']} with {criterion_info}: {model_data[f'{criterion_info}']}")
    
    # Sort by criterion value (not by rank which might be wrong)
    models_df = pd.DataFrame(models_data)
    models_df[f'{criterion_info}'] = pd.to_numeric(models_df[f'{criterion_info}'], errors='coerce')
    models_df = models_df.sort_values(f'{criterion_info}')
    
    # Re-assign ranks based on sorted criterion values
    models_df['–†–∞–Ω–≥'] = range(1, len(models_df) + 1)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    for i, original_idx in enumerate(models_df.index):
        st.session_state.auto_tuning_experiments[original_idx]['rank'] = i + 1
    
    logger.info(f"Created comparison DataFrame with {len(models_df)} rows, sorted by {criterion_info}")
    
    # Add filter options for the table
    st.subheader("–¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π")
    
    # Create metric display options
    col1, col2 = st.columns(2)
    with col1:
        show_train_metrics = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏", value=True)
    with col2:
        show_test_metrics = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏", value=True)
    
    # Filter columns based on user selection
    display_columns = ['–ú–æ–¥–µ–ª—å', '–†–∞–Ω–≥', f'{criterion_info}']
    
    if show_train_metrics:
        train_metric_cols = [col for col in models_df.columns if '(–æ–±—É—á)' in col]
        display_columns.extend(train_metric_cols)
    
    if show_test_metrics:
        test_metric_cols = [col for col in models_df.columns if '(—Ç–µ—Å—Ç)' in col]
        display_columns.extend(test_metric_cols)
    
    display_columns.append('–í—Ä–µ–º—è (—Å–µ–∫)')
    
    # Display the filtered comparison table
    st.dataframe(models_df[display_columns], use_container_width=True)
    
    # Allow user to download the complete comparison table
    csv = models_df.to_csv(index=False)
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (CSV)",
        data=csv,
        file_name=f"arima_models_comparison_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
        mime="text/csv"
    )
    
    logger.info("Displayed comparison table")
    
    # Detailed view of experiments with tabs
    if len(models_df) > 0:
        st.subheader("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö")
        
        # Get ALL models based on the sorted DataFrame order (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é)
        sorted_experiments = []
        for i, original_idx in enumerate(models_df.index):
            exp = st.session_state.auto_tuning_experiments[original_idx].copy()
            exp['rank'] = i + 1  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–Ω–≥
            sorted_experiments.append(exp)
        
        # Create tabs for ALL experiments with –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        experiment_tabs = st.tabs([f"#{i+1}: {exp['model_info']}" 
                                 for i, exp in enumerate(sorted_experiments)])
        
        # Fill each tab with details
        for i, tab in enumerate(experiment_tabs):
            if i < len(sorted_experiments):
                exp = sorted_experiments[i]
                with tab:
                    # Show rank and criterion value prominently
                    criterion_value = exp.get('info_criterion', '–ù/–î')
                    formatted_criterion = f"{criterion_value:.4f}" if isinstance(criterion_value, (int, float)) else str(criterion_value)
                    
                    st.markdown(f"### –ú–æ–¥–µ–ª—å #{i+1}: {exp['model_info']}")
                    st.markdown(f"**{criterion_info}**: {formatted_criterion}")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.markdown("**–û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞:**")
                        metrics_train = exp['train_metrics']
                        st.metric("RMSE", f"{metrics_train.get('rmse', '–ù/–î'):.4f}")
                        st.metric("MAE", f"{metrics_train.get('mae', '–ù/–î'):.4f}")
                        st.metric("MAPE", f"{metrics_train.get('mape', '–ù/–î'):.4f}" if 'mape' in metrics_train else "–ù/–î")
                        st.metric("SMAPE", f"{metrics_train.get('smape', '–ù/–î'):.4f}" if 'smape' in metrics_train else "–ù/–î")
                        st.metric("MASE", f"{metrics_train.get('mase', '–ù/–î'):.4f}" if 'mase' in metrics_train else "–ù/–î")
                        st.metric("R¬≤", f"{metrics_train.get('r2', np.nan):.4f}")
                        st.metric("Adjusted R¬≤", f"{metrics_train.get('adj_r2', np.nan):.4f}")
                        
                    with col2:
                        st.markdown("**–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞:**")
                        metrics_test = exp['test_metrics']
                        st.metric("RMSE", f"{metrics_test.get('rmse', '–ù/–î'):.4f}")
                        st.metric("MAE", f"{metrics_test.get('mae', '–ù/–î'):.4f}")
                        st.metric("MAPE", f"{metrics_test.get('mape', '–ù/–î'):.4f}" if 'mape' in metrics_test else "–ù/–î")
                        st.metric("SMAPE", f"{metrics_test.get('smape', '–ù/–î'):.4f}" if 'smape' in metrics_test else "–ù/–î")
                        st.metric("MASE", f"{metrics_test.get('mase', '–ù/–î'):.4f}" if 'mase' in metrics_test else "–ù/–î")
                        st.metric("R¬≤", f"{metrics_test.get('r2', np.nan):.4f}")
                        st.metric("Adjusted R¬≤", f"{metrics_test.get('adj_r2', np.nan):.4f}")
                    
                    # Generate forecast figure for this experiment model
                    try:
                        if st.session_state.ar_results and "original_series" in st.session_state.ar_results and "train" in st.session_state.ar_results and "test" in st.session_state.ar_results:
                            # Create forecast figure for this experiment model
                            forecast_fig = plot_forecast_plotly(
                                model=exp['model'],
                                steps=len(st.session_state.ar_results['test']),
                                original_data=st.session_state.ar_results['original_series'],
                                train_data=st.session_state.ar_results['train'],
                                test_data=st.session_state.ar_results['test'],
                                title=f"–ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏ #{i+1}: {exp['model_info']}"
                            )
                            st.plotly_chart(forecast_fig, use_container_width=True)
                    except Exception as e:
                        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º–æ–¥–µ–ª–∏: {str(e)}")
                    
                    # Add download report button for this model
                    try:
                        # Create forecast figure for this experiment model
                        forecast_fig = plot_forecast_matplotlib(
                            model=exp['model'],
                            steps=len(st.session_state.ar_results['test']),
                            original_data=st.session_state.ar_results['original_series'],
                            train_data=st.session_state.ar_results['train'],
                            test_data=st.session_state.ar_results['test'],
                            title=f"–ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏ #{i+1}: {exp['model_info']}"
                        )
                        forecast_img_base64 = reporting.save_plot_to_base64(forecast_fig, backend='matplotlib')
                        
                        # Create empty loss figure
                        loss_fig, ax = plt.subplots(figsize=(8, 4))
                        ax.text(0.5, 0.5, "–î–ª—è –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ—Ç–µ—Ä—å –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º", 
                            ha='center', va='center', fontsize=12)
                        ax.set_axis_off()
                        loss_img_base64 = reporting.save_plot_to_base64(loss_fig, backend='matplotlib')
                        
                        # Generate report
                        md_report = reporting.generate_markdown_report(
                            title=f"–û—Ç—á–µ—Ç –ø–æ –º–æ–¥–µ–ª–∏ #{i+1}: {exp['model_info']}",
                            description=f"–ê–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å {exp['model_info']} –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ä–∞–Ω–≥ {i+1}).",
                            metrics_train=exp['train_metrics'],
                            metrics_test=exp['test_metrics'],
                            train_time=exp.get('train_time', 0),
                            forecast_img_base64=forecast_img_base64,
                            loss_img_base64=loss_img_base64,
                            params=exp['params'],
                            early_stopping=False,
                            early_stopping_epoch=None
                        )
                        
                        # Generate PDF
                        pdf_bytes = None
                        try:
                            pdf_bytes = reporting.markdown_to_pdf(md_report)
                        except Exception as e:
                            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF: {e}")
                        
                        # Add download buttons
                        st.markdown("### –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏")
                        reporting.download_report_buttons(
                            md_report, 
                            pdf_bytes, 
                            md_filename=f"arima_model_{i+1}_report.md", 
                            pdf_filename=f"arima_model_{i+1}_report.pdf"
                        )
                    except Exception as e:
                        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É: {str(e)}")

        # Add consolidated report option
        st.subheader("–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –ø–æ–¥–±–æ—Ä—É")
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç"):
            try:
                # Create a consolidated report with all experiments
                consolidated_md = "# –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –ø–æ–¥–±–æ—Ä—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
                consolidated_md += f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                consolidated_md += "## –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π\n\n"
                
                # Enhanced comparison table with more metrics
                table_md = "| –†–∞–Ω–≥ | –ú–æ–¥–µ–ª—å | " + criterion_info + " | R¬≤ (—Ç–µ—Å—Ç) | Adj R¬≤ (—Ç–µ—Å—Ç) | RMSE (—Ç–µ—Å—Ç) | MAE (—Ç–µ—Å—Ç) | MAPE (—Ç–µ—Å—Ç) | SMAPE (—Ç–µ—Å—Ç) | MASE (—Ç–µ—Å—Ç) | Theil U2 (—Ç–µ—Å—Ç) |\n"
                table_md += "|------|--------|" + "-" * len(criterion_info) + "|----------|-------------|------------|------------|-------------|--------------|------------|----------------|\n"
                
                # Sort experiments by rank for the table
                sorted_experiments = sorted(st.session_state.auto_tuning_experiments, key=lambda x: x['rank'])
                
                for exp in sorted_experiments:
                    metrics = exp['test_metrics']
                    criterion_val = exp.get('info_criterion', '–ù/–î')
                    
                    # Format values correctly by evaluating conditional expressions outside the f-string
                    formatted_criterion = f"{criterion_val:.4f}" if isinstance(criterion_val, (int, float)) else str(criterion_val)
                    formatted_r2 = f"{metrics.get('r2', '–ù/–î'):.4f}" if isinstance(metrics.get('r2', '–ù/–î'), (int, float)) else str(metrics.get('r2', '–ù/–î'))
                    formatted_adj_r2 = f"{metrics.get('adj_r2', '–ù/–î'):.4f}" if isinstance(metrics.get('adj_r2', '–ù/–î'), (int, float)) else str(metrics.get('adj_r2', '–ù/–î'))
                    formatted_rmse = f"{metrics.get('rmse', '–ù/–î'):.4f}" if isinstance(metrics.get('rmse', '–ù/–î'), (int, float)) else str(metrics.get('rmse', '–ù/–î'))
                    formatted_mae = f"{metrics.get('mae', '–ù/–î'):.4f}" if isinstance(metrics.get('mae', '–ù/–î'), (int, float)) else str(metrics.get('mae', '–ù/–î'))
                    formatted_mape = f"{metrics.get('mape', '–ù/–î'):.4f}" if isinstance(metrics.get('mape', '–ù/–î'), (int, float)) else str(metrics.get('mape', '–ù/–î'))
                    formatted_smape = f"{metrics.get('smape', '–ù/–î'):.4f}" if isinstance(metrics.get('smape', '–ù/–î'), (int, float)) else str(metrics.get('smape', '–ù/–î'))
                    formatted_mase = f"{metrics.get('mase', '–ù/–î'):.4f}" if isinstance(metrics.get('mase', '–ù/–î'), (int, float)) else str(metrics.get('mase', '–ù/–î'))
                    formatted_theil = f"{metrics.get('theil_u2', '–ù/–î'):.4f}" if isinstance(metrics.get('theil_u2', '–ù/–î'), (int, float)) else str(metrics.get('theil_u2', '–ù/–î'))
                    
                    # Add row to table with proper formatting
                    table_md += f"| {exp['rank']} | {exp['model_info']} | {formatted_criterion} | "
                    table_md += f"{formatted_r2} | {formatted_adj_r2} | {formatted_rmse} | "
                    table_md += f"{formatted_mae} | {formatted_mape} | {formatted_smape} | "
                    table_md += f"{formatted_mase} | {formatted_theil} |\n"
                
                consolidated_md += table_md + "\n\n"
                
                # Add details for each model (all models, not just top 5)
                for i, exp in enumerate(sorted_experiments):
                    consolidated_md += f"## –ú–æ–¥–µ–ª—å #{i+1}: {exp['model_info']}\n\n"
                    
                    # Format parameters
                    params_text = "\n".join([f"- **{k}**: {v}" for k, v in exp['params'].items()])
                    consolidated_md += f"### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã\n{params_text}\n\n"
                    
                    # Add timing information
                    train_time = exp.get('train_time', 0)
                    metrics_time = exp.get('metrics_time', 0)
                    total_time = exp.get('total_time', train_time)
                    
                    consolidated_md += f"### –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
                    consolidated_md += f"- **–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏**: {train_time:.4f} —Å–µ–∫.\n"
                    if metrics_time > 0:
                        consolidated_md += f"- **–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫**: {metrics_time:.4f} —Å–µ–∫.\n"
                    consolidated_md += f"- **–û–±—â–µ–µ –≤—Ä–µ–º—è**: {total_time:.4f} —Å–µ–∫.\n\n"
                    
                    # Format metrics with all available metrics
                    consolidated_md += "### –ú–µ—Ç—Ä–∏–∫–∏\n\n"
                    consolidated_md += "**–û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞:**\n"
                    train_metrics = exp['train_metrics']
                    for metric_name, nice_name in [
                        ('r2', 'R¬≤'), ('adj_r2', 'Adjusted R¬≤'), ('mse', 'MSE'),
                        ('rmse', 'RMSE'), ('mae', 'MAE'), ('mape', 'MAPE'),
                        ('smape', 'SMAPE'), ('mase', 'MASE'), ('theil_u2', 'Theil U2')
                    ]:
                        value = train_metrics.get(metric_name, '–ù/–î')
                        formatted_value = f"{value:.4f}" if isinstance(value, (int, float)) else str(value)
                        consolidated_md += f"- **{nice_name}**: {formatted_value}\n"
                    
                    consolidated_md += "\n"
                    
                    # Test metrics with proper formatting
                    consolidated_md += "**–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞:**\n"
                    test_metrics = exp['test_metrics']
                    
                    # Apply proper formatting for each metric
                    for metric_name, nice_name in [
                        ('r2', 'R¬≤'), ('adj_r2', 'Adjusted R¬≤'), ('mse', 'MSE'),
                        ('rmse', 'RMSE'), ('mae', 'MAE'), ('mape', 'MAPE'),
                        ('smape', 'SMAPE'), ('mase', 'MASE'), ('theil_u2', 'Theil U2')
                    ]:
                        value = test_metrics.get(metric_name, '–ù/–î')
                        formatted_value = f"{value:.4f}" if isinstance(value, (int, float)) else str(value)
                        consolidated_md += f"- **{nice_name}**: {formatted_value}\n"
                    
                    consolidated_md += "\n"
                    
                    # Add separator
                    consolidated_md += "---\n\n"
                
                # Generate and offer consolidated report
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç (.md)",
                    data=consolidated_md,
                    file_name=f"arima_autotuning_report_{timestamp}.md",
                    mime="text/markdown"
                )
                
                # Try to generate PDF
                try:
                    pdf_bytes = reporting.markdown_to_pdf(consolidated_md)
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç (.pdf)",
                        data=pdf_bytes,
                        file_name=f"arima_autotuning_report_{timestamp}.pdf",
                        mime="application/pdf"
                    )
                except Exception as e:
                    st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF –¥–ª—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}")

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("–ê–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ (ARIMA/SARIMA)")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    time_series = load_time_series()
    if time_series is None or time_series.empty:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä—è–¥ —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–æ–º
    st.subheader("–ò—Å—Ö–æ–¥–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥")
    ts_series = time_series.iloc[:, 0] if isinstance(time_series, pd.DataFrame) else time_series
    fig = create_simple_time_series_plot(ts_series, title="–ò—Å—Ö–æ–¥–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥")
    st.plotly_chart(fig, use_container_width=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –ê–ö–§ –∏ –ß–ê–ö–§
    st.subheader("–ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
    
    with st.expander("–û —Ñ—É–Ω–∫—Ü–∏—è—Ö –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏", expanded=False):
        st.markdown("""
        **–ê–ö–§ (–ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)** –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Ä—è–¥–∞, —Å–¥–≤–∏–Ω—É—Ç—ã–º–∏ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ (–ª–∞–≥–æ–≤). –ü–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å:
        - –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
        - –ü–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Ä—è–¥–æ–∫ MA (q) –¥–ª—è ARIMA –º–æ–¥–µ–ª–∏
        
        **–ß–ê–ö–§ (–ß–∞—Å—Ç–Ω–∞—è –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)** –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤–ª–∏—è–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –ª–∞–≥–æ–≤. –ü–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å:
        - –ü–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Ä—è–¥–æ–∫ AR (p) –¥–ª—è ARIMA –º–æ–¥–µ–ª–∏
        - –ù–∞–ª–∏—á–∏–µ –ø—Ä—è–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –æ—Ç–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏
        
        **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:**
        - –ó–Ω–∞—á–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (–≥–æ–ª—É–±–∞—è –æ–±–ª–∞—Å—Ç—å) —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–µ–∑–Ω–∞—á–∏–º—ã–º–∏
        - –í—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∑–Ω–∞—á–∏–º—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
        - –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –≤ –ê–ö–§ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å
        - –†–µ–∑–∫–∏–π –æ–±—Ä—ã–≤ –≤ –ß–ê–ö–§ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ AR –ø—Ä–æ—Ü–µ—Å—Å–∞
        """)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ê–ö–§ –∏ –ß–ê–ö–§
    col1, col2 = st.columns(2)
    with col1:
        max_lags_acf = st.slider(
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–≥–æ–≤ –¥–ª—è –ê–ö–§", 
            min_value=10, 
            max_value=min(100, len(ts_series)//4), 
            value=min(40, len(ts_series)//10),
            help="–ë–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–≥–æ–≤ –¥–∞–µ—Ç –±–æ–ª–µ–µ –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"
        )
    with col2:
        max_lags_pacf = st.slider(
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–≥–æ–≤ –¥–ª—è –ß–ê–ö–§", 
            min_value=10, 
            max_value=min(100, len(ts_series)//4), 
            value=min(40, len(ts_series)//10),
            help="–ë–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–≥–æ–≤ –ø–æ–º–æ–≥–∞–µ—Ç –ª—É—á—à–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ AR"
        )
    
    try:
        # –°—Ç—Ä–æ–∏–º –ê–ö–§ –∏ –ß–ê–ö–§ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏
        acf_pacf_fig = plot_acf_pacf_plotly(
            ts_series, 
            title="–§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞"
        )
        st.plotly_chart(acf_pacf_fig, use_container_width=True)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ê–ö–§/–ß–ê–ö–§
        with st.expander("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", expanded=False):
            try:
                suggested_params = suggest_arima_params(ts_series)
                st.markdown("**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ARIMA –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ê–ö–§/–ß–ê–ö–§:**")
                st.json(suggested_params)
                st.info("–≠—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–Ω—É—é —Ç–æ—á–∫—É –¥–ª—è —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            except Exception as e:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {str(e)}")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {str(e)}")

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    st.sidebar.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
    
    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    tabs = st.sidebar.tabs(["–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä", "–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"])
    
    with tabs[0]:
        st.header("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        train_size = st.slider(
            "–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏", 
            min_value=0.5, 
            max_value=0.95, 
            value=0.8, 
            step=0.05,
            help="–î–æ–ª—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–æ—Å—Ç–∞–ª—å–Ω–æ–µ - –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"
        )
        
        seasonal = st.checkbox("–£—á–∏—Ç—ã–≤–∞—Ç—å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å", value=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞
        with st.expander("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", expanded=False):
            info_criterion = st.selectbox(
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π", 
                options=["aic", "bic", "aicc", "oob"],
                index=0,
                help="–ö—Ä–∏—Ç–µ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"
            )
            
            max_p = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ AR (p)", 0, 10, 5)  
            max_d = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è (d)", 0, 3, 2)  
            max_q = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ MA (q)", 0, 10, 5)  
            
            if seasonal:
                max_P = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ AR (P)", 0, 3, 2, key="auto_max_P")  
                max_D = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è (D)", 0, 2, 1, key="auto_max_D")  
                max_Q = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ MA (Q)", 0, 3, 2, key="auto_max_Q")  
                m = st.slider("–°–µ–∑–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (m)", 2, 365, 24, key="auto_seasonal_period")
        
        forecast_steps = st.slider(
            "–®–∞–≥–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–ø–µ—Ä–µ–¥", 
            min_value=0, 
            max_value=100, 
            value=10, 
            step=5,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –±—É–¥—É—â–µ–µ"
        )
        
        auto_button = st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä")
        
        if auto_button:
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤..."):
                try:
                    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
                    logger.info("Clearing previous experiments")
                    st.session_state.auto_tuning_experiments = []
                    
                    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    start_time = time.perf_counter()
                    
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    ts_series = time_series.iloc[:, 0] if isinstance(time_series, pd.DataFrame) else time_series
                    train, test = split_train_test(ts_series, train_size)
                    
                    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è auto_arima
                    auto_params = {
                        'seasonal': seasonal,
                        'information_criterion': info_criterion,
                        'max_p': max_p,
                        'max_d': max_d,
                        'max_q': max_q,
                        'return_all_models': True,  
                        'verbose': True,  
                    }
                    
                    if seasonal:
                        auto_params.update({
                            'max_P': max_P,
                            'max_D': max_D,
                            'max_Q': max_Q,
                            'm': m
                        })
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π –≤ session_state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–∑–∂–µ
                    st.session_state.last_info_criterion = info_criterion
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä
                    logger.info(f"Starting auto_arima with params: {auto_params}")
                    auto_results = auto_arima(train, **auto_params)
                    logger.info(f"auto_arima completed, keys in result: {list(auto_results.keys())}")
                    
                    # –¢–µ–ø–µ—Ä—å auto_results - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å 'best_model' –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –¥—Ä—É–≥–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏
                    model = auto_results['best_model']
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                    if 'all_models' in auto_results:
                        logger.info(f"Found {len(auto_results['all_models'])} models in auto_results['all_models']")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏—Ç–µ—Ä–∏–∏
                        criterion_used = auto_results.get('criterion_used', info_criterion).upper()
                        st.info(f"–ú–æ–¥–µ–ª–∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é {criterion_used}. –ú–µ–Ω—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å.")
                        
                        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
                        experiments_list = []
                        logger.info("Creating new experiments list")
                        
                        for i, model_info in enumerate(auto_results['all_models']):
                            logger.info(f"Processing model {i+1}/{len(auto_results['all_models'])}")
                            
                            try:
                                experiment_model = model_info['model']
                                experiment_params = experiment_model.get_params()
                                
                                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –∏–∑ model_info, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –Ω–µ–Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                                fit_time = model_info.get('fit_time', None)
                                
                                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ä–∞–≤–Ω–æ 0, —É—Å—Ç–∞–Ω–æ–≤–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                                if fit_time is None or fit_time < 0.001:
                                    logger.warning(f"Model {i+1} ({experiment_model.__class__.__name__}) has no fit_time recorded, using a default minimal value")
                                    fit_time = 0.001  # 1 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞ –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                                
                                # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
                                logger.info(f"Calculating metrics for model {i+1}")
                                
                                # –ó–∞—Å–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫
                                metrics_start_time = time.perf_counter()
                                
                                train_pred = experiment_model.predict_in_sample()
                                test_pred = experiment_model.predict(steps=len(test))
                                train_metrics = evaluate_model_performance(experiment_model, train, train)
                                test_metrics = evaluate_model_performance(experiment_model, train, test)
                                
                                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
                                metrics_time = time.perf_counter() - metrics_start_time
                                
                                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
                                experiment = {
                                    'model': experiment_model,
                                    'model_info': display_model_information(experiment_model),
                                    'params': experiment_params,
                                    'train_metrics': train_metrics,
                                    'test_metrics': test_metrics,
                                    'info_criterion': model_info.get('criterion_value', None),
                                    'train_time': fit_time,  
                                    'metrics_time': metrics_time,  
                                    'total_time': fit_time + metrics_time,  
                                    'rank': i + 1  
                                }
                                
                                experiments_list.append(experiment)
                                logger.info(f"Successfully added experiment {i+1}: {experiment['model_info']} to list. Total experiments now: {len(experiments_list)}")
                                
                            except Exception as exp_e:
                                logger.error(f"Error processing model {i+1}: {str(exp_e)}", exc_info=True)
                                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–¥–µ–ª—å {i+1}: {str(exp_e)}")
                        
                        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å—Ä–∞–∑—É –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
                        st.session_state.auto_tuning_experiments = experiments_list
                        logger.info(f"Finished processing all models. Total experiments saved to session_state: {len(st.session_state.auto_tuning_experiments)}")
                        
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        if len(st.session_state.auto_tuning_experiments) > 0:
                            logger.info("Auto-tuning experiments successfully saved to session_state")
                        else:
                            logger.error("Failed to save any experiments to session_state")
                            
                    else:
                        logger.warning("No 'all_models' key found in auto_results")
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    train_time = time.perf_counter() - start_time
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    train_pred = model.predict_in_sample()
                    test_pred = model.predict(steps=len(test))
                    
                    train_metrics = evaluate_model_performance(model, train, train)
                    test_metrics = evaluate_model_performance(model, train, test)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
                    st.session_state.ar_model = model
                    st.session_state.ar_results = {
                        'train': train,
                        'test': test,
                        'train_predictions': train_pred,
                        'test_predictions': test_pred,
                        'train_metrics': train_metrics,
                        'test_metrics': test_metrics,
                        'original_series': ts_series,
                        'train_time': train_time,
                        'model_info': display_model_information(model),
                        'params': model.get_params()
                    }
                    
                    st.success(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {display_model_information(model)}")
                    logger.info(f"Auto-tuning completed with {len(st.session_state.auto_tuning_experiments)} experiments")
                    
                except Exception as e:
                    logger.error(f"Error in auto-tuning: {str(e)}", exc_info=True)
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–¥–±–æ—Ä–µ: {str(e)}")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ - –≤—ã–∑—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    display_auto_tuning_experiments()

    with tabs[1]:
        st.header("–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        train_size = st.slider(
            "–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏", 
            min_value=0.5, 
            max_value=0.95, 
            value=0.8, 
            step=0.05,
            key="manual_train_size",
            help="–î–æ–ª—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–æ—Å—Ç–∞–ª—å–Ω–æ–µ - –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"
        )
        
        model_type = st.radio("–¢–∏–ø –º–æ–¥–µ–ª–∏", ["ARIMA", "SARIMA"])
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ARIMA
        p = st.slider("–ü–æ—Ä—è–¥–æ–∫ AR (p)", 0, 5, 1, key="manual_p")
        d = st.slider("–ü–æ—Ä—è–¥–æ–∫ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è (d)", 0, 2, 1, key="manual_d")
        q = st.slider("–ü–æ—Ä—è–¥–æ–∫ MA (q)", 0, 5, 1, key="manual_q")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è SARIMA
        if model_type == "SARIMA":
            P = st.slider("–°–µ–∑–æ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ AR (P)", 0, 2, 1, key="manual_P")
            D = st.slider("–°–µ–∑–æ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è (D)", 0, 1, 1, key="manual_D")
            Q = st.slider("–°–µ–∑–æ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ MA (Q)", 0, 2, 1, key="manual_Q")
            m = st.slider("–°–µ–∑–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (m)", 2, 365, 12, key="manual_seasonal_period")
        
        forecast_steps = st.slider(
            "–®–∞–≥–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–ø–µ—Ä–µ–¥", 
            min_value=0, 
            max_value=100, 
            value=10, 
            step=5,
            key="manual_forecast_steps",
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –±—É–¥—É—â–µ–µ"
        )
        
        manual_button = st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
        
        if manual_button:
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."):
                try:
                    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    start_time = time.perf_counter()
                    
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    ts_series = time_series.iloc[:, 0] if isinstance(time_series, pd.DataFrame) else time_series
                    train, test = split_train_test(ts_series, train_size)
                    
                    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
                    if model_type == "ARIMA":
                        model = ARIMAModel(p=p, d=d, q=q)
                    else:  # SARIMA
                        model = SARIMAModel(p=p, d=d, q=q, P=P, D=D, Q=Q, m=m)
                    
                    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
                    model.fit(train)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    train_time = time.perf_counter() - start_time
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    train_pred = model.predict_in_sample()
                    test_pred = model.predict(steps=len(test))
                    
                    train_metrics = evaluate_model_performance(model, train, train)
                    test_metrics = evaluate_model_performance(model, train, test)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
                    st.session_state.ar_model = model
                    st.session_state.ar_results = {
                        'train': train,
                        'test': test,
                        'train_predictions': train_pred,
                        'test_predictions': test_pred,
                        'train_metrics': train_metrics,
                        'test_metrics': test_metrics,
                        'original_series': ts_series,
                        'train_time': train_time,
                        'model_info': display_model_information(model),
                        'params': model.get_params()
                    }
                    
                    st.success(f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞: {display_model_information(model)}")
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
    
    # –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.session_state.auto_tuning_experiments and len(st.session_state.auto_tuning_experiments) > 0:
        st.subheader("üéØ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        model_options = []
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
        sorted_df = pd.DataFrame([{'original_idx': i, 'criterion': exp.get('info_criterion', float('inf'))} 
                                 for i, exp in enumerate(st.session_state.auto_tuning_experiments)])
        sorted_df = sorted_df.sort_values('criterion')
        
        for display_rank, row in enumerate(sorted_df.itertuples(), 1):
            original_idx = row.original_idx
            exp = st.session_state.auto_tuning_experiments[original_idx]
            criterion_value = exp.get('info_criterion', '–ù/–î')
            criterion_str = f"{criterion_value:.4f}" if isinstance(criterion_value, (int, float)) else str(criterion_value)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–π –∏–∑ session_state
            criterion_name = st.session_state.get('last_info_criterion', 'AIC').upper();
            
            model_options.append(f"#{display_rank}: {exp['model_info']} ({criterion_name}: {criterion_str})")
        
        # –°–µ–ª–µ–∫—Ç–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        selected_model_index = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:",
            range(len(model_options)),
            format_func=lambda x: model_options[x],
            index=0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω–∞ –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å
            help="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
        )
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
        if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
                sorted_original_idx = int(sorted_df.iloc[selected_model_index]['original_idx'])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
                selected_exp = st.session_state.auto_tuning_experiments[sorted_original_idx]
                selected_model = selected_exp['model']
                
                # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                if st.session_state.ar_results:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è, —á—Ç–æ –∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–¥–±–æ—Ä–µ
                    train = st.session_state.ar_results['train']
                    test = st.session_state.ar_results['test']
                    ts_series = st.session_state.ar_results['original_series']
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                    train_pred = selected_model.predict_in_sample()
                    test_pred = selected_model.predict(steps=len(test))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
                    st.session_state.ar_model = selected_model
                    st.session_state.ar_results.update({
                        'train_predictions': train_pred,
                        'test_predictions': test_pred,
                        'train_metrics': selected_exp['train_metrics'],
                        'test_metrics': selected_exp['test_metrics'],
                        'model_info': selected_exp['model_info'],
                        'params': selected_exp['params'],
                        'train_time': selected_exp.get('train_time', 0)
                    })
                    
                    st.success(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {selected_exp['model_info']}")
                    st.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–Ω–∏–∑, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.")
                    
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π rerun –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    st.rerun()
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏: {str(e)}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        if st.session_state.ar_model is not None:
            current_model_info = display_model_information(st.session_state.ar_model)
            st.info(f"üîç –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {current_model_info}")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if st.session_state.ar_results is not None:
        results = st.session_state.ar_results
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞")
        
        # –í—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è
        st.caption(f"–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {results['train_time']:.2f} —Å–µ–∫.")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**–û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞:**")
            metrics_train = results['train_metrics']
            st.metric("RMSE", f"{metrics_train['rmse']:.4f}")
            st.metric("MAE", f"{metrics_train['mae']:.4f}")
            st.metric("MAPE", f"{metrics_train.get('mape', np.nan):.4f}")
            st.metric("SMAPE", f"{metrics_train.get('smape', np.nan):.4f}")
            st.metric("MASE", f"{metrics_train.get('mase', np.nan):.4f}")
            st.metric("R¬≤", f"{metrics_train.get('r2', np.nan):.4f}")
            st.metric("Adjusted R¬≤", f"{metrics_train.get('adj_r2', np.nan):.4f}")
            
            with st.expander("–ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —ç—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏?"):
                st.markdown("""
                - **RMSE** (Root Mean Squared Error) - —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é –≤–µ–ª–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ —Ç–µ—Ö –∂–µ –µ–¥–∏–Ω–∏—Ü–∞—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è, —á—Ç–æ –∏ –¥–∞–Ω–Ω—ã–µ.
                - **MAE** (Mean Absolute Error) - —Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ë–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤–∞ –∫ –≤—ã–±—Ä–æ—Å–∞–º, —á–µ–º RMSE.
                - **MAPE** (Mean Absolute Percentage Error) - —Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.
                - **SMAPE** (Symmetric Mean Absolute Percentage Error) - —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞, —á–µ–º MAPE, –ø—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è—Ö –±–ª–∏–∑–∫–∏—Ö –∫ –Ω—É–ª—é.
                - **MASE** (Mean Absolute Scaled Error) - –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ó–Ω–∞—á–µ–Ω–∏—è < 1 –æ–∑–Ω–∞—á–∞—é—Ç, —á—Ç–æ –º–æ–¥–µ–ª—å –ª—É—á—à–µ –Ω–∞–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞.
                - **R¬≤** - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–ª—é –¥–∏—Å–ø–µ—Ä—Å–∏–∏, –æ–±—ä—è—Å–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å—é (1.0 - –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑).
                - **Adjusted R¬≤** - —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π R¬≤. –£—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏, –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ.
                """)
        
        with col2:
            st.markdown("**–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞:**")
            metrics_test = results['test_metrics']
            st.metric("RMSE", f"{metrics_test['rmse']:.4f}")
            st.metric("MAE", f"{metrics_test['mae']:.4f}")
            st.metric("MAPE", f"{metrics_test.get('mape', np.nan):.4f}")
            st.metric("SMAPE", f"{metrics_test.get('smape', np.nan):.4f}")
            st.metric("MASE", f"{metrics_test.get('mase', np.nan):.4f}")
            st.metric("R¬≤", f"{metrics_test.get('r2', np.nan):.4f}")
            st.metric("Adjusted R¬≤", f"{metrics_test.get('adj_r2', np.nan):.4f}")
            
            with st.expander("–ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?"):
                st.markdown("""
                **–•–æ—Ä–æ—à–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏** —Å—á–∏—Ç–∞—é—Ç—Å—è:
                
                1. **RMSE –∏ MAE** - —á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ. –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Å –º–∞—Å—à—Ç–∞–±–æ–º –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
                
                2. **MAPE**:
                   - < 10%: –æ—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
                   - 10-20%: —Ö–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥–Ω–æ–∑
                   - 20-50%: –ø—Ä–∏–µ–º–ª–µ–º—ã–π –ø—Ä–æ–≥–Ω–æ–∑
                   - > 50%: –ø–ª–æ—Ö–æ–π –ø—Ä–æ–≥–Ω–æ–∑
                
                3. **MASE**:
                   - < 1: –º–æ–¥–µ–ª—å –ª—É—á—à–µ –Ω–∞–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
                   - ‚âà 1: —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º–æ —Å –Ω–∞–∏–≤–Ω—ã–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º
                   - > 1: –º–æ–¥–µ–ª—å —Ö—É–∂–µ –Ω–∞–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
                
                4. **R¬≤ –∏ Adjusted R¬≤**:
                   - > 0.9: –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                   - 0.7-0.9: —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                   - 0.5-0.7: —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                   - < 0.5: –º–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è
                
                5. **Theil's U2**:
                   - < 0.8: –º–æ–¥–µ–ª—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ª—É—á—à–µ –Ω–∞–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
                   - 0.8-1: –º–æ–¥–µ–ª—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º–∞ —Å –Ω–∞–∏–≤–Ω—ã–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º
                   - > 1: –º–æ–¥–µ–ª—å —Ö—É–∂–µ –Ω–∞–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
                
                –ï—Å–ª–∏ –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Ö—É–∂–µ, —á–µ–º –Ω–∞ –æ–±—É—á–∞—é—â–µ–π, —ç—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ.
                """)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
        st.info(results['model_info'])
        
        if hasattr(st.session_state.ar_model, 'fitted_model') and hasattr(st.session_state.ar_model.fitted_model, 'summary'):
            with st.expander("–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏"):
                try:
                    st.text(st.session_state.ar_model.fitted_model.summary())
                except:
                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ–ª–∏.")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        if all(key in results for key in ['original_series', 'train', 'test', 'test_predictions']):
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            train_predictions = None
            if st.session_state.ar_model and hasattr(st.session_state.ar_model, 'predict_in_sample'):
                try:
                    train_predictions = st.session_state.ar_model.predict_in_sample()
                except:
                    train_predictions = None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è plotly
            fig = create_unified_forecast_plot_plotly(
                original_series=results['original_series'],
                train_predictions=train_predictions,
                test_predictions=results['test_predictions'],
                train_data=results['train'],
                test_data=results['test'],
                title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è",
                height=500
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            st.markdown("### üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            export_data = pd.DataFrame(index=results['original_series'].index)
            export_data['–ò—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ'] = results['original_series'].values
            
            # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –æ–±—É—á–∞—é—â–µ–π/—Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
            export_data['–¢–∏–ø_–¥–∞–Ω–Ω—ã—Ö'] = '–û–±—É—á–µ–Ω–∏–µ'
            if 'test' in results and len(results['test']) > 0:
                test_indices = results['test'].index
                export_data.loc[test_indices, '–¢–∏–ø_–¥–∞–Ω–Ω—ã—Ö'] = '–¢–µ—Å—Ç'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ
            if train_predictions is not None:
                export_data['–ü—Ä–æ–≥–Ω–æ–∑_–æ–±—É—á–µ–Ω–∏–µ'] = np.nan
                export_data.loc[train_predictions.index, '–ü—Ä–æ–≥–Ω–æ–∑_–æ–±—É—á–µ–Ω–∏–µ'] = train_predictions.values
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
            if 'test_predictions' in results and results['test_predictions'] is not None:
                export_data['–ü—Ä–æ–≥–Ω–æ–∑_—Ç–µ—Å—Ç'] = np.nan
                export_data.loc[results['test_predictions'].index, '–ü—Ä–æ–≥–Ω–æ–∑_—Ç–µ—Å—Ç'] = results['test_predictions'].values
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ (–æ—à–∏–±–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞)
            if train_predictions is not None:
                export_data['–û—Å—Ç–∞—Ç–∫–∏_–æ–±—É—á–µ–Ω–∏–µ'] = np.nan
                train_residuals = results['train'].loc[train_predictions.index] - train_predictions
                export_data.loc[train_predictions.index, '–û—Å—Ç–∞—Ç–∫–∏_–æ–±—É—á–µ–Ω–∏–µ'] = train_residuals.values
            
            if 'test_predictions' in results and results['test_predictions'] is not None:
                export_data['–û—Å—Ç–∞—Ç–∫–∏_—Ç–µ—Å—Ç'] = np.nan
                test_residuals = results['test'].loc[results['test_predictions'].index] - results['test_predictions']
                export_data.loc[results['test_predictions'].index, '–û—Å—Ç–∞—Ç–∫–∏_—Ç–µ—Å—Ç'] = test_residuals.values
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
            if train_predictions is not None:
                export_data['–ê–±—Å_–æ—à–∏–±–∫–∞_–æ–±—É—á–µ–Ω–∏–µ'] = np.nan
                abs_errors_train = np.abs(results['train'].loc[train_predictions.index] - train_predictions)
                export_data.loc[train_predictions.index, '–ê–±—Å_–æ—à–∏–±–∫–∞_–æ–±—É—á–µ–Ω–∏–µ'] = abs_errors_train.values
            
            if 'test_predictions' in results and results['test_predictions'] is not None:
                export_data['–ê–±—Å_–æ—à–∏–±–∫–∞_—Ç–µ—Å—Ç'] = np.nan
                abs_errors_test = np.abs(results['test'].loc[results['test_predictions'].index] - results['test_predictions'])
                export_data.loc[results['test_predictions'].index, '–ê–±—Å_–æ—à–∏–±–∫–∞_—Ç–µ—Å—Ç'] = abs_errors_test.values
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
            st.markdown("**–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:**")
            st.dataframe(export_data.head(10), use_container_width=True)
            
            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            csv_export = export_data.to_csv(index=True)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            model_name = results.get('model_info', 'ARIMA').replace(' ', '_').replace('(', '').replace(')', '').replace(',', '')
            
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è (CSV)",
                data=csv_export,
                file_name=f"arima_modeling_results_{model_name}_{timestamp}.csv",
                mime="text/csv",
                help="–°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏: –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –ø—Ä–æ–≥–Ω–æ–∑—ã, –æ—Å—Ç–∞—Ç–∫–∏, –æ—à–∏–±–∫–∏"
            )
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–∞
            with st.expander("üìã –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ CSV —Ñ–∞–π–ª–µ"):
                st.markdown("""
                **–°—Ç–æ–ª–±—Ü—ã –≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–º —Ñ–∞–π–ª–µ:**
                
                - **–ò–Ω–¥–µ–∫—Å** - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (–¥–∞—Ç–∞/–≤—Ä–µ–º—è)
                - **–ò—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ** - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
                - **–¢–∏–ø_–¥–∞–Ω–Ω—ã—Ö** - –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ ('–û–±—É—á–µ–Ω–∏–µ') –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–π ('–¢–µ—Å—Ç')
                - **–ü—Ä–æ–≥–Ω–æ–∑_–æ–±—É—á–µ–Ω–∏–µ** - –ø—Ä–æ–≥–Ω–æ–∑—ã –º–æ–¥–µ–ª–∏ –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ
                - **–ü—Ä–æ–≥–Ω–æ–∑_—Ç–µ—Å—Ç** - –ø—Ä–æ–≥–Ω–æ–∑—ã –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
                - **–û—Å—Ç–∞—Ç–∫–∏_–æ–±—É—á–µ–Ω–∏–µ** - —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–æ–±—É—á–µ–Ω–∏–µ)
                - **–û—Å—Ç–∞—Ç–∫–∏_—Ç–µ—Å—Ç** - —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (—Ç–µ—Å—Ç)
                - **–ê–±—Å_–æ—à–∏–±–∫–∞_–æ–±—É—á–µ–Ω–∏–µ** - –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–æ–±—É—á–µ–Ω–∏–µ)
                - **–ê–±—Å_–æ—à–∏–±–∫–∞_—Ç–µ—Å—Ç** - –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ (—Ç–µ—Å—Ç)
                
                **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è 
                —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤, —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã.
                """)

        # –°–ï–ö–¶–ò–Ø: –ü—Ä–æ–≥–Ω–æ–∑ –≤ –±—É–¥—É—â–µ–µ –ø–æ —É–∂–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        if st.session_state.ar_model is not None:
            st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±—É–¥—É—â–µ–µ –ø–æ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
            future_steps = st.number_input(
                "–®–∞–≥–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–ø–µ—Ä–µ–¥", min_value=1, max_value=100, value=10, step=1, key="future_steps")
            
            if st.button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –≤ –±—É–¥—É—â–µ–µ"):
                try:
                    future_preds = st.session_state.ar_model.predict(steps=int(future_steps))
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
                    future_fig = create_unified_forecast_plot_plotly(
                        original_series=results['original_series'],
                        future_predictions=future_preds,
                        train_data=results['train'],
                        title="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±—É–¥—É—â–µ–µ"
                    )
                    st.plotly_chart(future_fig, use_container_width=True)
                    
                    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
                    st.dataframe(pd.DataFrame({'–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ': future_preds}))
                    
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    csv = future_preds.to_csv(index=True)
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ (CSV)",
                        data=csv,
                        file_name=f"arima_forecast_{timestamp}.csv",
                        mime="text/csv"
                    )
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–µ –≤ –±—É–¥—É—â–µ–µ: {str(e)}")
    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –µ—â–µ –Ω–µ –æ–±—É—á–µ–Ω–∞, –ø–æ–∫–∞–∂–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ' –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")


if __name__ == "__main__":
    main()